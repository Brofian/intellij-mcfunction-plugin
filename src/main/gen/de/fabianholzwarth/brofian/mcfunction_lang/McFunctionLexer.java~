// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: src/main/java/de/fabianholzwarth/brofian/mcfunction_lang/McFunction.flex

// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
package de.fabianholzwarth.brofian.mcfunction_lang;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import de.fabianholzwarth.brofian.mcfunction_lang.psi.McFunctionTypes;


class McFunctionLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\5\u0100\1\u0200\1\u0300\1\u0100\5\u0400\1\u0500\1\u0600"+
    "\1\u0700\6\u0100\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00"+
    "\3\u0100\1\u0e00\205\u0100\1\u0600\1\u0100\1\u0f00\1\u1000\1\u1100"+
    "\1\u1200\54\u0100\10\u1300\37\u0100\1\u0900\4\u0100\1\u1400\10\u0100"+
    "\1\u1500\2\u0100\1\u1600\1\u1700\1\u1200\1\u0100\1\u0500\1\u0100"+
    "\1\u1800\1\u1500\1\u0800\3\u0100\1\u1100\1\u1900\114\u0100\1\u1a00"+
    "\1\u1100\153\u0100\1\u1b00\11\u0100\1\u1c00\1\u1200\6\u0100\1\u1100"+
    "\u0f16\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\0\1\6\1\7\1\0\1\10\4\0\2\10\1\11"+
    "\1\12\1\13\1\10\1\14\1\15\1\16\3\17\1\20"+
    "\3\17\1\21\1\0\1\22\1\23\1\22\1\0\1\24"+
    "\32\25\1\26\1\0\1\27\1\30\1\31\1\0\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\25\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\25\1\62\1\0\1\63\1\30\6\0\1\3\u01da\0"+
    "\12\64\206\0\12\64\306\0\12\64\234\0\12\64\166\0"+
    "\12\64\140\0\12\64\166\0\12\64\106\0\12\64\u0116\0"+
    "\12\64\106\0\12\64\u0146\0\12\64\46\0\12\64\u012c\0"+
    "\12\64\200\0\12\64\246\0\12\64\6\0\12\64\266\0"+
    "\12\64\126\0\12\64\206\0\12\64\6\0\12\64\316\0"+
    "\2\3\u01a6\0\12\64\46\0\12\64\306\0\12\64\26\0"+
    "\12\64\126\0\12\64\u0196\0\12\64\6\0\u0100\65\240\0"+
    "\12\64\206\0\12\64\u012c\0\12\64\200\0\12\64\74\0"+
    "\12\64\220\0\12\64\166\0\12\64\146\0\12\64\206\0"+
    "\12\64\106\0\12\64\266\0\12\64\u0164\0\62\64\100\0"+
    "\12\64\266\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[7424];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\3\2\1\1\1\3\1\1\2\4\1\5"+
    "\1\6\1\1\1\4\1\7\30\4\1\1\1\5\1\10"+
    "\1\0\1\11\1\6\3\0\1\4\1\12\1\0\1\7"+
    "\5\4\1\13\5\4\1\13\64\4\1\14\1\4\1\0"+
    "\1\15\2\0\2\5\1\0\1\7\1\0\75\4\1\16"+
    "\3\4\1\13\14\4\1\12\1\7\16\4\1\14\13\4"+
    "\1\14\56\4\1\13\41\4\1\13\34\4\1\6\11\4"+
    "\1\13\12\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[364];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a"+
    "\0\u01b0\0\u01e6\0\u021c\0\u017a\0\u0252\0\u0288\0\u02be\0\u02f4"+
    "\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4"+
    "\0\u04da\0\u0510\0\u0546\0\u057c\0\u05b2\0\u05e8\0\u061e\0\u0654"+
    "\0\u068a\0\u06c0\0\u06f6\0\u072c\0\u0762\0\u0798\0\u07ce\0\u0804"+
    "\0\u083a\0\242\0\u010e\0\u010e\0\66\0\u0870\0\u08a6\0\u08dc"+
    "\0\u0912\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u0a56\0\u0a8c"+
    "\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06\0\u0288"+
    "\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a\0\u0d80\0\u0db6"+
    "\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30\0\u0f66"+
    "\0\u0f9c\0\u0fd2\0\u1008\0\u103e\0\u1074\0\u10aa\0\u10e0\0\u1116"+
    "\0\u114c\0\u1182\0\u11b8\0\u11ee\0\u1224\0\u125a\0\u1290\0\u12c6"+
    "\0\u12fc\0\u1332\0\u1368\0\u139e\0\u13d4\0\u140a\0\u1440\0\u1476"+
    "\0\u14ac\0\u14e2\0\u1518\0\u154e\0\u1584\0\u15ba\0\u15f0\0\u1626"+
    "\0\u165c\0\u1692\0\u16c8\0\u16fe\0\u0288\0\u1734\0\u0804\0\u0804"+
    "\0\u176a\0\u17a0\0\u0912\0\u176a\0\u17d6\0\u180c\0\u1842\0\u1878"+
    "\0\u18ae\0\u18e4\0\u191a\0\u1950\0\u1986\0\u19bc\0\u19f2\0\u1a28"+
    "\0\u1a5e\0\u1a94\0\u1aca\0\u1b00\0\u1b36\0\u1b6c\0\u1ba2\0\u1bd8"+
    "\0\u1c0e\0\u1c44\0\u1c7a\0\u1cb0\0\u1ce6\0\u1d1c\0\u1d52\0\u1d88"+
    "\0\u1dbe\0\u1df4\0\u1e2a\0\u1e60\0\u1e96\0\u1ecc\0\u1f02\0\u1f38"+
    "\0\u1f6e\0\u1fa4\0\u1fda\0\u2010\0\u2046\0\u207c\0\u20b2\0\u20e8"+
    "\0\u211e\0\u2154\0\u218a\0\u21c0\0\u21f6\0\u222c\0\u2262\0\u2298"+
    "\0\u22ce\0\u2304\0\u233a\0\u2370\0\u23a6\0\u23dc\0\u2412\0\u2448"+
    "\0\u247e\0\u24b4\0\u24ea\0\u2520\0\u0288\0\u2556\0\u258c\0\u25c2"+
    "\0\u25f8\0\u262e\0\u2664\0\u269a\0\u26d0\0\u2706\0\u273c\0\u2772"+
    "\0\u27a8\0\u27de\0\u2814\0\u284a\0\u17a0\0\u17d6\0\66\0\u2880"+
    "\0\u28b6\0\u28ec\0\u2922\0\u2958\0\u298e\0\u29c4\0\u29fa\0\u2a30"+
    "\0\u2a66\0\u2a9c\0\u2ad2\0\u2b08\0\u2b3e\0\u2b74\0\u2baa\0\u2be0"+
    "\0\u2c16\0\u2c4c\0\u2c82\0\u2cb8\0\u2cee\0\u2d24\0\u2d5a\0\u2d90"+
    "\0\u2dc6\0\u2dfc\0\u2e32\0\u2e68\0\u2e9e\0\u2ed4\0\u2f0a\0\u2f40"+
    "\0\u2f76\0\u2fac\0\u2fe2\0\u3018\0\u304e\0\u3084\0\u30ba\0\u30f0"+
    "\0\u3126\0\u315c\0\u3192\0\u31c8\0\u31fe\0\u3234\0\u326a\0\u32a0"+
    "\0\u32d6\0\u330c\0\u3342\0\u3378\0\u33ae\0\u33e4\0\u341a\0\u3450"+
    "\0\u3486\0\u34bc\0\u34f2\0\u3528\0\u355e\0\u3594\0\u35ca\0\u3600"+
    "\0\u3636\0\u366c\0\u36a2\0\u36d8\0\u370e\0\u3744\0\u377a\0\u37b0"+
    "\0\u37e6\0\u381c\0\u3852\0\u3888\0\u38be\0\u38f4\0\u392a\0\u3960"+
    "\0\u3996\0\u39cc\0\u3a02\0\u3a38\0\u3a6e\0\u3aa4\0\u3ada\0\u3b10"+
    "\0\u3b46\0\u3b7c\0\u3bb2\0\u3be8\0\u3c1e\0\u3c54\0\u3c8a\0\u3cc0"+
    "\0\u3cf6\0\u3d2c\0\u3d62\0\u3d98\0\u3dce\0\u3e04\0\u3e3a\0\u3e70"+
    "\0\u3ea6\0\u3edc\0\u211e\0\u3f12\0\u3f48\0\u3f7e\0\u3fb4\0\u3fea"+
    "\0\u4020\0\u4056\0\u408c\0\u40c2\0\u40f8\0\u412e\0\u4164\0\u419a"+
    "\0\u41d0\0\u4206\0\u423c\0\u4272\0\u42a8\0\u42de\0\u4314\0\u434a"+
    "\0\u4380\0\u43b6\0\u43ec\0\u4422\0\u4458\0\u448e\0\u44c4\0\u0288"+
    "\0\u44fa\0\u4530\0\u4566\0\u459c\0\u45d2\0\u4608\0\u463e\0\u4674"+
    "\0\u46aa\0\u46e0\0\u4716\0\u474c\0\u4782\0\u47b8\0\u47ee\0\u4824"+
    "\0\u485a\0\u4890\0\u48c6\0\u48fc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[364];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\3\1\5\1\6\1\7\1\10"+
    "\1\2\1\11\1\12\5\13\1\2\1\14\1\2\1\15"+
    "\1\16\2\2\1\17\1\16\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\2\1\51\1\2"+
    "\67\0\1\3\2\52\1\3\1\52\61\0\5\52\61\0"+
    "\1\52\1\4\3\52\60\0\2\53\4\0\1\54\56\53"+
    "\1\0\2\7\1\0\2\7\1\0\60\7\23\0\1\55"+
    "\51\0\1\56\2\0\1\16\1\12\5\13\1\57\1\0"+
    "\1\55\1\0\1\16\1\60\2\0\31\16\2\0\1\51"+
    "\13\0\7\12\4\0\1\12\1\60\2\0\31\12\13\0"+
    "\1\56\2\0\1\16\1\61\5\13\1\57\3\0\1\16"+
    "\1\60\2\0\31\16\2\0\1\51\12\0\1\62\20\0"+
    "\1\62\3\0\1\62\11\0\1\62\1\0\2\62\21\0"+
    "\1\56\2\0\1\16\1\12\5\16\1\57\3\0\1\16"+
    "\1\60\2\0\31\16\16\0\1\63\1\0\5\64\43\0"+
    "\1\64\10\0\1\56\2\0\1\16\1\12\5\16\1\57"+
    "\3\0\1\16\1\60\2\0\4\16\1\65\1\16\1\66"+
    "\4\16\1\67\3\16\1\70\1\71\2\16\1\72\1\16"+
    "\1\73\3\16\13\0\1\56\2\0\1\16\1\12\5\16"+
    "\1\57\3\0\1\16\1\60\2\0\1\16\1\74\3\16"+
    "\1\75\5\16\1\76\2\16\1\77\11\16\1\100\13\0"+
    "\1\56\2\0\1\16\1\12\5\16\1\57\3\0\1\16"+
    "\1\60\2\0\13\16\1\101\2\16\1\102\2\16\1\103"+
    "\7\16\13\0\1\56\2\0\1\16\1\12\5\16\1\57"+
    "\3\0\1\16\1\60\2\0\1\16\1\104\3\16\1\105"+
    "\3\16\1\106\17\16\13\0\1\56\2\0\1\16\1\12"+
    "\5\16\1\57\3\0\1\16\1\60\2\0\1\16\1\107"+
    "\4\16\1\110\6\16\1\111\7\16\1\112\1\16\1\113"+
    "\1\16\13\0\1\56\2\0\1\16\1\12\5\16\1\57"+
    "\3\0\1\16\1\60\2\0\1\16\1\114\7\16\1\115"+
    "\4\16\1\116\2\16\1\117\2\16\1\120\4\16\13\0"+
    "\1\56\2\0\1\16\1\12\5\16\1\57\3\0\1\16"+
    "\1\60\2\0\1\16\1\121\3\16\1\122\3\16\1\123"+
    "\4\16\1\124\2\16\1\125\7\16\13\0\1\56\2\0"+
    "\1\16\1\12\5\16\1\57\3\0\1\16\1\60\2\0"+
    "\1\16\1\126\14\16\1\127\12\16\13\0\1\56\2\0"+
    "\1\16\1\12\5\16\1\57\3\0\1\16\1\60\2\0"+
    "\15\16\1\130\13\16\13\0\1\56\2\0\1\16\1\12"+
    "\5\16\1\57\3\0\1\16\1\60\2\0\5\16\1\131"+
    "\23\16\13\0\1\56\2\0\1\16\1\12\5\16\1\57"+
    "\3\0\1\16\1\60\2\0\1\16\1\132\3\16\1\133"+
    "\3\16\1\134\17\16\13\0\1\56\2\0\1\16\1\12"+
    "\5\16\1\57\3\0\1\16\1\60\2\0\1\16\1\135"+
    "\3\16\1\136\10\16\1\137\5\16\1\140\4\16\13\0"+
    "\1\56\2\0\1\16\1\12\5\16\1\57\3\0\1\16"+
    "\1\60\2\0\1\16\1\141\14\16\1\142\12\16\13\0"+
    "\1\56\2\0\1\16\1\12\5\16\1\57\3\0\1\16"+
    "\1\60\2\0\15\16\1\143\6\16\1\144\4\16\13\0"+
    "\1\56\2\0\1\16\1\12\5\16\1\57\3\0\1\16"+
    "\1\60\2\0\5\16\1\145\5\16\1\146\2\16\1\147"+
    "\2\16\1\150\7\16\13\0\1\56\2\0\1\16\1\12"+
    "\5\16\1\57\3\0\1\16\1\60\2\0\24\16\1\151"+
    "\4\16\13\0\1\56\2\0\1\16\1\12\5\16\1\57"+
    "\3\0\1\16\1\60\2\0\5\16\1\152\23\16\13\0"+
    "\1\56\2\0\1\16\1\12\5\16\1\57\3\0\1\16"+
    "\1\60\2\0\5\16\1\153\11\16\1\154\3\16\1\155"+
    "\1\156\4\16\13\0\1\56\2\0\1\16\1\12\5\16"+
    "\1\57\3\0\1\16\1\60\2\0\10\16\1\157\5\16"+
    "\1\100\2\16\1\160\7\16\13\0\1\56\2\0\1\16"+
    "\1\12\5\16\1\57\3\0\1\16\1\60\2\0\15\16"+
    "\1\161\13\16\13\0\1\56\2\0\1\16\1\12\5\16"+
    "\1\57\3\0\1\16\1\60\2\0\1\16\1\162\7\16"+
    "\1\163\17\16\13\0\1\56\2\0\1\16\1\12\5\16"+
    "\1\57\3\0\1\16\1\60\2\0\10\16\1\164\20\16"+
    "\13\0\1\56\2\0\1\16\1\12\5\16\1\57\3\0"+
    "\1\16\1\60\2\0\17\16\1\165\11\16\13\0\1\56"+
    "\2\0\1\16\1\12\5\16\1\57\3\0\1\16\1\60"+
    "\2\0\5\16\1\166\23\16\4\0\2\167\4\0\55\167"+
    "\1\170\1\167\14\0\1\171\5\51\43\0\1\51\10\0"+
    "\1\56\2\0\1\56\1\0\5\56\1\57\3\0\1\56"+
    "\3\0\31\56\16\0\7\12\4\0\1\12\3\0\31\12"+
    "\4\0\2\172\4\0\57\172\13\0\2\12\5\173\4\0"+
    "\1\12\1\60\2\0\31\12\2\0\1\174\27\0\1\175"+
    "\53\0\5\176\43\0\1\176\14\0\1\177\5\64\43\0"+
    "\1\64\10\0\1\56\2\0\1\16\1\12\5\16\1\57"+
    "\3\0\1\16\1\60\2\0\4\16\1\100\20\16\1\200"+
    "\3\16\13\0\1\56\2\0\1\16\1\12\5\16\1\57"+
    "\3\0\1\16\1\60\2\0\23\16\1\201\5\16\13\0"+
    "\1\56\2\0\1\16\1\12\5\16\1\57\3\0\1\16"+
    "\1\60\2\0\13\16\1\100\15\16\13\0\1\56\2\0"+
    "\1\16\1\12\5\16\1\57\3\0\1\16\1\60\2\0"+
    "\17\16\1\202\11\16\13\0\1\56\2\0\1\16\1\12"+
    "\5\16\1\57\3\0\1\16\1\60\2\0\24\16\1\203"+
    "\4\16\13\0\1\56\2\0\1\16\1\12\5\16\1\57"+
    "\3\0\1\16\1\60\2\0\23\16\1\204\5\16\13\0"+
    "\1\56\2\0\1\16\1\12\5\16\1\57\3\0\1\16"+
    "\1\60\2\0\1\16\1\205\27\16\13\0\1\56\2\0"+
    "\1\16\1\12\5\16\1\57\3\0\1\16\1\60\2\0"+
    "\15\16\1\165\4\16\1\206\6\16\13\0\1\56\2\0"+
    "\1\16\1\12\5\16\1\57\3\0\1\16\1\60\2\0"+
    "\6\16\1\207\22\16\13\0\1\56\2\0\1\16\1\12"+
    "\5\16\1\57\3\0\1\16\1\60\2\0\1\16\1\210"+
    "\14\16\1\211\5\16\1\212\4\16\13\0\1\56\2\0"+
    "\1\16\1\12\5\16\1\57\3\0\1\16\1\60\2\0"+
    "\22\16\1\213\6\16\13\0\1\56\2\0\1\16\1\12"+
    "\5\16\1\57\3\0\1\16\1\60\2\0\5\16\1\214"+
    "\10\16\1\215\12\16\13\0\1\56\2\0\1\16\1\12"+
    "\5\16\1\57\3\0\1\16\1\60\2\0\13\16\1\216"+
    "\15\16\13\0\1\56\2\0\1\16\1\12\5\16\1\57"+
    "\3\0\1\16\1\60\2\0\5\16\1\217\23\16\13\0"+
    "\1\56\2\0\1\16\1\12\5\16\1\57\3\0\1\16"+
    "\1\60\2\0\14\16\1\220\4\16\1\221\1\16\1\222"+
    "\5\16\13\0\1\56\2\0\1\16\1\12\5\16\1\57"+
    "\3\0\1\16\1\60\2\0\2\16\1\223\3\16\1\224"+
    "\13\16\1\225\6\16\13\0\1\56\2\0\1\16\1\12"+
    "\5\16\1\57\3\0\1\16\1\60\2\0\6\16\1\226"+
    "\13\16\1\227\6\16\13\0\1\56\2\0\1\16\1\12"+
    "\5\16\1\57\3\0\1\16\1\60\2\0\22\16\1\230"+
    "\6\16\13\0\1\56\2\0\1\16\1\12\5\16\1\57"+
    "\3\0\1\16\1\60\2\0\6\16\1\231\22\16\13\0"+
    "\1\56\2\0\1\16\1\12\5\16\1\57\3\0\1\16"+
    "\1\60\2\0\1\16\1\232\1\16\1\233\17\16\1\234"+
    "\5\16\13\0\1\56\2\0\1\16\1\12\5\16\1\57"+
    "\3\0\1\16\1\60\2\0\5\16\1\235\23\16\13\0"+
    "\1\56\2\0\1\16\1\12\5\16\1\57\3\0\1\16"+
    "\1\60\2\0\17\16\1\236\11\16\13\0\1\56\2\0"+
    "\1\16\1\12\5\16\1\57\3\0\1\16\1\60\2\0"+
    "\13\16\1\237\15\16\13\0\1\56\2\0\1\16\1\12"+
    "\5\16\1\57\3\0\1\16\1\60\2\0\13\16\1\240"+
    "\5\16\1\132\7\16\13\0\1\56\2\0\1\16\1\12"+
    "\5\16\1\57\3\0\1\16\1\60\2\0\21\16\1\241"+
    "\7\16\13\0\1\56\2\0\1\16\1\12\5\16\1\57"+
    "\3\0\1\16\1\60\2\0\16\16\1\242\12\16\13\0"+
    "\1\56\2\0\1\16\1\12\5\16\1\57\3\0\1\16"+
    "\1\60\2\0\15\16\1\243\13\16\13\0\1\56\2\0"+
    "\1\16\1\12\5\16\1\57\3\0\1\16\1\60\2\0"+
    "\14\16\1\244\14\16\13\0\1\56\2\0\1\16\1\12"+
    "\5\16\1\57\3\0\1\16\1\60\2\0\23\16\1\100"+
    "\5\16\13\0\1\56\2\0\1\16\1\12\5\16\1\57"+
    "\3\0\1\16\1\60\2\0\25\16\1\245\3\16\13\0"+
    "\1\56\2\0\1\16\1\12\5\16\1\57\3\0\1\16"+
    "\1\60\2\0\13\16\1\246\15\16\13\0\1\56\2\0"+
    "\1\16\1\12\5\16\1\57\3\0\1\16\1\60\2\0"+
    "\1\16\1\247\3\16\1\250\23\16\13\0\1\56\2\0"+
    "\1\16\1\12\5\16\1\57\3\0\1\16\1\60\2\0"+
    "\21\16\1\251\7\16\13\0\1\56\2\0\1\16\1\12"+
    "\5\16\1\57\3\0\1\16\1\60\2\0\13\16\1\252"+
    "\15\16\13\0\1\56\2\0\1\16\1\12\5\16\1\57"+
    "\3\0\1\16\1\60\2\0\6\16\1\253\13\16\1\254"+
    "\6\16\13\0\1\56\2\0\1\16\1\12\5\16\1\57"+
    "\3\0\1\16\1\60\2\0\5\16\1\255\23\16\13\0"+
    "\1\56\2\0\1\16\1\12\5\16\1\57\3\0\1\16"+
    "\1\60\2\0\22\16\1\122\6\16\13\0\1\56\2\0"+
    "\1\16\1\12\5\16\1\57\3\0\1\16\1\60\2\0"+
    "\25\16\1\256\3\16\13\0\1\56\2\0\1\16\1\12"+
    "\5\16\1\57\3\0\1\16\1\60\2\0\7\16\1\257"+
    "\12\16\1\122\6\16\13\0\1\56\2\0\1\16\1\12"+
    "\5\16\1\57\3\0\1\16\1\60\2\0\22\16\1\260"+
    "\1\261\3\16\1\100\1\16\13\0\1\56\2\0\1\16"+
    "\1\12\5\16\1\57\3\0\1\16\1\60\2\0\21\16"+
    "\1\262\7\16\13\0\1\56\2\0\1\16\1\12\5\16"+
    "\1\57\3\0\1\16\1\60\2\0\4\16\1\263\20\16"+
    "\1\206\3\16\13\0\1\56\2\0\1\16\1\12\5\16"+
    "\1\57\3\0\1\16\1\60\2\0\13\16\1\264\15\16"+
    "\13\0\1\56\2\0\1\16\1\12\5\16\1\57\3\0"+
    "\1\16\1\60\2\0\14\16\1\206\14\16\13\0\1\56"+
    "\2\0\1\16\1\12\5\16\1\57\3\0\1\16\1\60"+
    "\2\0\21\16\1\265\1\16\1\266\5\16\13\0\1\56"+
    "\2\0\1\16\1\12\5\16\1\57\3\0\1\16\1\60"+
    "\2\0\13\16\1\230\15\16\13\0\1\56\2\0\1\16"+
    "\1\12\5\16\1\57\3\0\1\16\1\60\2\0\23\16"+
    "\1\267\5\16\13\0\1\56\2\0\1\16\1\12\5\16"+
    "\1\57\3\0\1\16\1\60\2\0\1\16\1\270\27\16"+
    "\13\0\1\56\2\0\1\16\1\12\5\16\1\57\3\0"+
    "\1\16\1\60\2\0\1\16\1\271\27\16\13\0\1\56"+
    "\2\0\1\16\1\12\5\16\1\57\3\0\1\16\1\60"+
    "\2\0\11\16\1\272\17\16\13\0\1\56\2\0\1\16"+
    "\1\12\5\16\1\57\3\0\1\16\1\60\2\0\5\16"+
    "\1\70\10\16\1\273\12\16\13\0\1\56\2\0\1\16"+
    "\1\12\5\16\1\57\3\0\1\16\1\60\2\0\5\16"+
    "\1\274\23\16\13\0\1\56\2\0\1\16\1\12\5\16"+
    "\1\57\3\0\1\16\1\60\2\0\4\16\1\275\7\16"+
    "\1\276\2\16\1\277\5\16\1\300\3\16\13\0\1\56"+
    "\2\0\1\16\1\12\5\16\1\57\3\0\1\16\1\60"+
    "\2\0\23\16\1\301\5\16\13\0\1\56\2\0\1\16"+
    "\1\12\5\16\1\57\3\0\1\16\1\60\2\0\5\16"+
    "\1\302\23\16\13\0\1\56\2\0\1\16\1\12\5\16"+
    "\1\57\3\0\1\16\1\60\2\0\1\16\1\303\14\16"+
    "\1\304\2\16\1\305\6\16\1\306\13\0\1\56\2\0"+
    "\1\16\1\12\5\16\1\57\3\0\1\16\1\60\2\0"+
    "\21\16\1\307\7\16\13\0\1\56\2\0\1\16\1\12"+
    "\5\16\1\57\3\0\1\16\1\60\2\0\21\16\1\310"+
    "\7\16\13\0\1\56\2\0\1\16\1\12\5\16\1\57"+
    "\3\0\1\16\1\60\2\0\24\16\1\206\4\16\13\0"+
    "\1\56\2\0\1\16\1\12\5\16\1\57\3\0\1\16"+
    "\1\60\2\0\23\16\1\311\5\16\13\0\1\56\2\0"+
    "\1\16\1\12\5\16\1\57\3\0\1\16\1\60\2\0"+
    "\13\16\1\160\15\16\13\0\1\56\2\0\1\16\1\12"+
    "\5\16\1\57\3\0\1\16\1\60\2\0\22\16\1\312"+
    "\6\16\13\0\1\56\2\0\1\16\1\12\5\16\1\57"+
    "\3\0\1\16\1\60\2\0\11\16\1\313\17\16\13\0"+
    "\1\56\2\0\1\16\1\12\5\16\1\57\3\0\1\16"+
    "\1\60\2\0\13\16\1\314\15\16\20\0\5\174\43\0"+
    "\1\174\1\0\2\172\4\0\21\172\1\315\35\172\1\0"+
    "\2\175\4\0\21\175\1\316\35\175\15\0\5\64\43\0"+
    "\1\64\15\0\5\317\43\0\1\317\10\0\1\56\2\0"+
    "\1\16\1\12\5\16\1\57\3\0\1\16\1\60\2\0"+
    "\1\16\1\320\3\16\1\321\23\16\13\0\1\56\2\0"+
    "\1\16\1\12\5\16\1\57\3\0\1\16\1\60\2\0"+
    "\5\16\1\322\23\16\13\0\1\56\2\0\1\16\1\12"+
    "\5\16\1\57\3\0\1\16\1\60\2\0\5\16\1\323"+
    "\23\16\13\0\1\56\2\0\1\16\1\12\5\16\1\57"+
    "\3\0\1\16\1\60\2\0\1\16\1\275\27\16\13\0"+
    "\1\56\2\0\1\16\1\12\5\16\1\57\3\0\1\16"+
    "\1\60\2\0\21\16\1\324\7\16\13\0\1\56\2\0"+
    "\1\16\1\12\5\16\1\57\3\0\1\16\1\60\2\0"+
    "\11\16\1\325\17\16\13\0\1\56\2\0\1\16\1\12"+
    "\5\16\1\57\3\0\1\16\1\60\2\0\5\16\1\100"+
    "\23\16\13\0\1\56\2\0\1\16\1\12\5\16\1\57"+
    "\3\0\1\16\1\60\2\0\16\16\1\326\12\16\13\0"+
    "\1\56\2\0\1\16\1\12\5\16\1\57\3\0\1\16"+
    "\1\60\2\0\3\16\1\327\25\16\13\0\1\56\2\0"+
    "\1\16\1\12\5\16\1\57\3\0\1\16\1\60\2\0"+
    "\3\16\1\330\25\16\13\0\1\56\2\0\1\16\1\12"+
    "\5\16\1\57\3\0\1\16\1\60\2\0\5\16\1\275"+
    "\23\16\13\0\1\56\2\0\1\16\1\12\5\16\1\57"+
    "\3\0\1\16\1\60\2\0\22\16\1\331\6\16\13\0"+
    "\1\56\2\0\1\16\1\12\5\16\1\57\3\0\1\16"+
    "\1\60\2\0\1\16\1\332\27\16\13\0\1\56\2\0"+
    "\1\16\1\12\5\16\1\57\3\0\1\16\1\60\2\0"+
    "\15\16\1\245\13\16\13\0\1\56\2\0\1\16\1\12"+
    "\5\16\1\57\3\0\1\16\1\60\2\0\16\16\1\322"+
    "\12\16\13\0\1\56\2\0\1\16\1\12\5\16\1\57"+
    "\3\0\1\16\1\60\2\0\1\16\1\333\27\16\13\0"+
    "\1\56\2\0\1\16\1\12\5\16\1\57\3\0\1\16"+
    "\1\60\2\0\1\16\1\334\27\16\13\0\1\56\2\0"+
    "\1\16\1\12\5\16\1\57\3\0\1\16\1\60\2\0"+
    "\12\16\1\335\16\16\13\0\1\56\2\0\1\16\1\12"+
    "\5\16\1\57\3\0\1\16\1\60\2\0\1\16\1\336"+
    "\27\16\13\0\1\56\2\0\1\16\1\12\5\16\1\57"+
    "\3\0\1\16\1\60\2\0\24\16\1\337\4\16\13\0"+
    "\1\56\2\0\1\16\1\12\5\16\1\57\3\0\1\16"+
    "\1\60\2\0\1\16\1\340\27\16\13\0\1\56\2\0"+
    "\1\16\1\12\5\16\1\57\3\0\1\16\1\60\2\0"+
    "\23\16\1\341\5\16\13\0\1\56\2\0\1\16\1\12"+
    "\5\16\1\57\3\0\1\16\1\60\2\0\6\16\1\342"+
    "\22\16\13\0\1\56\2\0\1\16\1\12\5\16\1\57"+
    "\3\0\1\16\1\60\2\0\1\16\1\343\27\16\13\0"+
    "\1\56\2\0\1\16\1\12\5\16\1\57\3\0\1\16"+
    "\1\60\2\0\30\16\1\100\13\0\1\56\2\0\1\16"+
    "\1\12\5\16\1\57\3\0\1\16\1\60\2\0\5\16"+
    "\1\344\23\16\13\0\1\56\2\0\1\16\1\12\5\16"+
    "\1\57\3\0\1\16\1\60\2\0\2\16\1\345\26\16"+
    "\13\0\1\56\2\0\1\16\1\12\5\16\1\57\3\0"+
    "\1\16\1\60\2\0\10\16\1\346\20\16\13\0\1\56"+
    "\2\0\1\16\1\12\5\16\1\57\3\0\1\16\1\60"+
    "\2\0\11\16\1\347\17\16\13\0\1\56\2\0\1\16"+
    "\1\12\5\16\1\57\3\0\1\16\1\60\2\0\21\16"+
    "\1\350\7\16\13\0\1\56\2\0\1\16\1\12\5\16"+
    "\1\57\3\0\1\16\1\60\2\0\5\16\1\351\23\16"+
    "\13\0\1\56\2\0\1\16\1\12\5\16\1\57\3\0"+
    "\1\16\1\60\2\0\22\16\1\206\6\16\13\0\1\56"+
    "\2\0\1\16\1\12\5\16\1\57\3\0\1\16\1\60"+
    "\2\0\13\16\1\352\7\16\1\353\5\16\13\0\1\56"+
    "\2\0\1\16\1\12\5\16\1\57\3\0\1\16\1\60"+
    "\2\0\3\16\1\354\25\16\13\0\1\56\2\0\1\16"+
    "\1\12\5\16\1\57\3\0\1\16\1\60\2\0\14\16"+
    "\1\100\14\16\13\0\1\56\2\0\1\16\1\12\5\16"+
    "\1\57\3\0\1\16\1\60\2\0\3\16\1\355\25\16"+
    "\13\0\1\56\2\0\1\16\1\12\5\16\1\57\3\0"+
    "\1\16\1\60\2\0\5\16\1\356\23\16\13\0\1\56"+
    "\2\0\1\16\1\12\5\16\1\57\3\0\1\16\1\60"+
    "\2\0\5\16\1\165\23\16\13\0\1\56\2\0\1\16"+
    "\1\12\5\16\1\57\3\0\1\16\1\60\2\0\4\16"+
    "\1\275\24\16\13\0\1\56\2\0\1\16\1\12\5\16"+
    "\1\57\3\0\1\16\1\60\2\0\15\16\1\122\12\16"+
    "\1\275\13\0\1\56\2\0\1\16\1\12\5\16\1\57"+
    "\3\0\1\16\1\60\2\0\5\16\1\357\23\16\13\0"+
    "\1\56\2\0\1\16\1\12\5\16\1\57\3\0\1\16"+
    "\1\60\2\0\4\16\1\100\24\16\13\0\1\56\2\0"+
    "\1\16\1\12\5\16\1\57\3\0\1\16\1\60\2\0"+
    "\13\16\1\360\15\16\13\0\1\56\2\0\1\16\1\12"+
    "\5\16\1\57\3\0\1\16\1\60\2\0\11\16\1\361"+
    "\17\16\13\0\1\56\2\0\1\16\1\12\5\16\1\57"+
    "\3\0\1\16\1\60\2\0\5\16\1\303\23\16\13\0"+
    "\1\56\2\0\1\16\1\12\5\16\1\57\3\0\1\16"+
    "\1\60\2\0\17\16\1\100\11\16\13\0\1\56\2\0"+
    "\1\16\1\12\5\16\1\57\3\0\1\16\1\60\2\0"+
    "\5\16\1\362\23\16\13\0\1\56\2\0\1\16\1\12"+
    "\5\16\1\57\3\0\1\16\1\60\2\0\10\16\1\363"+
    "\20\16\13\0\1\56\2\0\1\16\1\12\5\16\1\57"+
    "\3\0\1\16\1\60\2\0\12\16\1\364\16\16\13\0"+
    "\1\56\2\0\1\16\1\12\5\16\1\57\3\0\1\16"+
    "\1\60\2\0\3\16\1\365\25\16\13\0\1\56\2\0"+
    "\1\16\1\12\5\16\1\57\3\0\1\16\1\60\2\0"+
    "\7\16\1\206\21\16\13\0\1\56\2\0\1\16\1\12"+
    "\5\16\1\57\3\0\1\16\1\60\2\0\11\16\1\366"+
    "\17\16\13\0\1\56\2\0\1\16\1\12\5\16\1\57"+
    "\3\0\1\16\1\60\2\0\23\16\1\367\5\16\13\0"+
    "\1\56\2\0\1\16\1\12\5\16\1\57\3\0\1\16"+
    "\1\60\2\0\14\16\1\370\14\16\13\0\1\56\2\0"+
    "\1\16\1\12\5\16\1\57\3\0\1\16\1\60\2\0"+
    "\3\16\1\371\25\16\13\0\1\56\2\0\1\16\1\12"+
    "\5\16\1\57\3\0\1\16\1\60\2\0\13\16\1\372"+
    "\15\16\13\0\1\56\2\0\1\16\1\12\5\16\1\57"+
    "\3\0\1\16\1\60\2\0\3\16\1\373\25\16\13\0"+
    "\1\56\2\0\1\16\1\12\5\16\1\57\3\0\1\16"+
    "\1\60\2\0\30\16\1\374\13\0\1\56\2\0\1\16"+
    "\1\12\5\16\1\57\3\0\1\16\1\60\2\0\15\16"+
    "\1\375\13\16\13\0\1\56\2\0\1\16\1\12\5\16"+
    "\1\57\3\0\1\16\1\60\2\0\7\16\1\376\21\16"+
    "\13\0\1\56\2\0\1\16\1\12\5\16\1\57\3\0"+
    "\1\16\1\60\2\0\21\16\1\230\7\16\13\0\1\56"+
    "\2\0\1\16\1\12\5\16\1\57\3\0\1\16\1\60"+
    "\2\0\16\16\1\377\12\16\13\0\1\56\2\0\1\16"+
    "\1\12\5\16\1\57\3\0\1\16\1\60\2\0\13\16"+
    "\1\u0100\15\16\13\0\1\56\2\0\1\16\1\12\5\16"+
    "\1\57\3\0\1\16\1\60\2\0\16\16\1\u0101\12\16"+
    "\13\0\1\56\2\0\1\16\1\12\5\16\1\57\3\0"+
    "\1\16\1\60\2\0\2\16\1\u0102\26\16\13\0\1\56"+
    "\2\0\1\16\1\12\5\16\1\57\3\0\1\16\1\60"+
    "\2\0\3\16\1\u0103\25\16\13\0\1\56\2\0\1\16"+
    "\1\12\5\16\1\57\3\0\1\16\1\60\2\0\21\16"+
    "\1\122\7\16\13\0\1\56\2\0\1\16\1\12\5\16"+
    "\1\57\3\0\1\16\1\60\2\0\17\16\1\100\1\16"+
    "\1\u0104\7\16\13\0\1\56\2\0\1\16\1\12\5\16"+
    "\1\57\3\0\1\16\1\60\2\0\11\16\1\u0105\17\16"+
    "\13\0\1\56\2\0\1\16\1\12\5\16\1\57\3\0"+
    "\1\16\1\60\2\0\13\16\1\206\15\16\13\0\1\56"+
    "\2\0\1\16\1\12\5\16\1\57\3\0\1\16\1\60"+
    "\2\0\25\16\1\u0106\3\16\13\0\1\56\2\0\1\16"+
    "\1\12\5\16\1\57\3\0\1\16\1\60\2\0\16\16"+
    "\1\u0107\12\16\13\0\1\56\2\0\1\16\1\12\5\16"+
    "\1\57\3\0\1\16\1\60\2\0\11\16\1\67\17\16"+
    "\13\0\1\56\2\0\1\16\1\12\5\16\1\57\3\0"+
    "\1\16\1\60\2\0\11\16\1\343\17\16\13\0\1\56"+
    "\2\0\1\16\1\12\5\16\1\57\3\0\1\16\1\60"+
    "\2\0\23\16\1\212\5\16\13\0\1\56\2\0\1\16"+
    "\1\12\5\16\1\57\3\0\1\16\1\60\2\0\13\16"+
    "\1\u0108\15\16\13\0\1\56\2\0\1\16\1\12\5\16"+
    "\1\57\3\0\1\16\1\60\2\0\15\16\1\u0109\13\16"+
    "\13\0\1\56\2\0\1\16\1\12\5\16\1\57\3\0"+
    "\1\16\1\60\2\0\15\16\1\u010a\13\16\13\0\1\56"+
    "\2\0\1\16\1\12\5\16\1\57\3\0\1\16\1\60"+
    "\2\0\21\16\1\100\7\16\13\0\1\56\2\0\1\16"+
    "\1\12\5\16\1\57\3\0\1\16\1\60\2\0\15\16"+
    "\1\251\13\16\13\0\1\56\2\0\1\16\1\12\5\16"+
    "\1\57\3\0\1\16\1\60\2\0\11\16\1\u010b\17\16"+
    "\13\0\1\56\2\0\1\16\1\12\5\16\1\57\3\0"+
    "\1\16\1\60\2\0\13\16\1\227\15\16\13\0\1\56"+
    "\2\0\1\16\1\12\5\16\1\57\3\0\1\16\1\60"+
    "\2\0\21\16\1\206\7\16\13\0\1\56\2\0\1\16"+
    "\1\12\5\16\1\57\3\0\1\16\1\60\2\0\12\16"+
    "\1\275\16\16\13\0\1\56\2\0\1\16\1\12\5\16"+
    "\1\57\3\0\1\16\1\60\2\0\12\16\1\100\16\16"+
    "\13\0\1\56\2\0\1\16\1\12\5\16\1\57\3\0"+
    "\1\16\1\60\2\0\2\16\1\214\26\16\13\0\1\56"+
    "\2\0\1\16\1\12\5\16\1\57\3\0\1\16\1\60"+
    "\2\0\21\16\1\165\7\16\13\0\1\56\2\0\1\16"+
    "\1\12\5\16\1\57\3\0\1\16\1\60\2\0\23\16"+
    "\1\u010c\5\16\13\0\1\56\2\0\1\16\1\12\5\16"+
    "\1\57\3\0\1\16\1\60\2\0\7\16\1\245\21\16"+
    "\13\0\1\56\2\0\1\16\1\12\5\16\1\57\3\0"+
    "\1\16\1\60\2\0\1\u010d\30\16\13\0\1\56\2\0"+
    "\1\16\1\12\5\16\1\57\3\0\1\16\1\60\2\0"+
    "\17\16\1\u010e\11\16\13\0\1\56\2\0\1\16\1\12"+
    "\5\16\1\57\3\0\1\16\1\60\2\0\7\16\1\165"+
    "\21\16\13\0\1\56\2\0\1\16\1\12\5\16\1\57"+
    "\3\0\1\16\1\60\2\0\24\16\1\u010f\4\16\13\0"+
    "\1\56\2\0\1\16\1\12\5\16\1\57\3\0\1\16"+
    "\1\60\2\0\21\16\1\u0110\7\16\13\0\1\56\2\0"+
    "\1\16\1\12\5\16\1\57\3\0\1\16\1\60\2\0"+
    "\11\16\1\u0111\17\16\13\0\1\56\2\0\1\16\1\12"+
    "\5\16\1\57\3\0\1\16\1\60\2\0\2\16\1\306"+
    "\26\16\13\0\1\56\2\0\1\16\1\12\5\16\1\57"+
    "\3\0\1\16\1\60\2\0\3\16\1\u0112\25\16\13\0"+
    "\1\56\2\0\1\16\1\12\5\16\1\57\3\0\1\16"+
    "\1\60\2\0\13\16\1\u0113\15\16\13\0\1\56\2\0"+
    "\1\16\1\12\5\16\1\57\3\0\1\16\1\60\2\0"+
    "\1\16\1\u0114\27\16\13\0\1\56\2\0\1\16\1\12"+
    "\5\16\1\57\3\0\1\16\1\60\2\0\23\16\1\230"+
    "\5\16\13\0\1\56\2\0\1\16\1\12\5\16\1\57"+
    "\3\0\1\16\1\60\2\0\30\16\1\u0115\13\0\1\56"+
    "\2\0\1\16\1\12\5\16\1\57\3\0\1\16\1\60"+
    "\2\0\21\16\1\u0116\7\16\13\0\1\56\2\0\1\16"+
    "\1\12\5\16\1\57\3\0\1\16\1\60\2\0\2\16"+
    "\1\u0117\26\16\13\0\1\56\2\0\1\16\1\12\5\16"+
    "\1\57\3\0\1\16\1\60\2\0\5\16\1\u0118\23\16"+
    "\13\0\1\56\2\0\1\16\1\12\5\16\1\57\3\0"+
    "\1\16\1\60\2\0\5\16\1\u0119\23\16\13\0\1\56"+
    "\2\0\1\16\1\12\5\16\1\57\3\0\1\16\1\60"+
    "\2\0\23\16\1\u011a\5\16\13\0\1\56\2\0\1\16"+
    "\1\12\5\16\1\57\3\0\1\16\1\60\2\0\14\16"+
    "\1\u011b\4\16\1\u011c\7\16\13\0\1\56\2\0\1\16"+
    "\1\12\5\16\1\57\3\0\1\16\1\60\2\0\15\16"+
    "\1\275\13\16\13\0\1\56\2\0\1\16\1\12\5\16"+
    "\1\57\3\0\1\16\1\60\2\0\16\16\1\u011d\12\16"+
    "\13\0\1\56\2\0\1\16\1\12\5\16\1\57\3\0"+
    "\1\16\1\60\2\0\15\16\1\u011e\13\16\13\0\1\56"+
    "\2\0\1\16\1\12\5\16\1\57\3\0\1\16\1\60"+
    "\2\0\13\16\1\u011f\15\16\13\0\1\56\2\0\1\16"+
    "\1\12\5\16\1\57\3\0\1\16\1\60\2\0\23\16"+
    "\1\u0120\5\16\13\0\1\56\2\0\1\16\1\12\5\16"+
    "\1\57\3\0\1\16\1\60\2\0\5\16\1\251\23\16"+
    "\13\0\1\56\2\0\1\16\1\12\5\16\1\57\3\0"+
    "\1\16\1\60\2\0\10\16\1\u0121\20\16\13\0\1\56"+
    "\2\0\1\16\1\12\5\16\1\57\3\0\1\16\1\60"+
    "\2\0\6\16\1\u0122\22\16\13\0\1\56\2\0\1\16"+
    "\1\12\5\16\1\57\3\0\1\16\1\60\2\0\11\16"+
    "\1\u0123\17\16\13\0\1\56\2\0\1\16\1\12\5\16"+
    "\1\57\3\0\1\16\1\60\2\0\1\16\1\67\27\16"+
    "\13\0\1\56\2\0\1\16\1\12\5\16\1\57\3\0"+
    "\1\16\1\60\2\0\10\16\1\u0124\20\16\13\0\1\56"+
    "\2\0\1\16\1\12\5\16\1\57\3\0\1\16\1\60"+
    "\2\0\11\16\1\u0125\17\16\13\0\1\56\2\0\1\16"+
    "\1\12\5\16\1\57\3\0\1\16\1\60\2\0\5\16"+
    "\1\u0126\23\16\13\0\1\56\2\0\1\16\1\12\5\16"+
    "\1\57\3\0\1\16\1\60\2\0\5\16\1\u0127\23\16"+
    "\13\0\1\56\2\0\1\16\1\12\5\16\1\57\3\0"+
    "\1\16\1\60\2\0\23\16\1\u011f\5\16\13\0\1\56"+
    "\2\0\1\16\1\12\5\16\1\57\3\0\1\16\1\60"+
    "\2\0\21\16\1\u0128\7\16\13\0\1\56\2\0\1\16"+
    "\1\12\5\16\1\57\3\0\1\16\1\60\2\0\25\16"+
    "\1\206\3\16\13\0\1\56\2\0\1\16\1\12\5\16"+
    "\1\57\3\0\1\16\1\60\2\0\1\16\1\u0129\27\16"+
    "\13\0\1\56\2\0\1\16\1\12\5\16\1\57\3\0"+
    "\1\16\1\60\2\0\12\16\1\206\16\16\13\0\1\56"+
    "\2\0\1\16\1\12\5\16\1\57\3\0\1\16\1\60"+
    "\2\0\13\16\1\u012a\15\16\13\0\1\56\2\0\1\16"+
    "\1\12\5\16\1\57\3\0\1\16\1\60\2\0\23\16"+
    "\1\u012b\5\16\13\0\1\56\2\0\1\16\1\12\5\16"+
    "\1\57\3\0\1\16\1\60\2\0\1\16\1\262\27\16"+
    "\13\0\1\56\2\0\1\16\1\12\5\16\1\57\3\0"+
    "\1\16\1\60\2\0\15\16\1\u012c\13\16\13\0\1\56"+
    "\2\0\1\16\1\12\5\16\1\57\3\0\1\16\1\60"+
    "\2\0\11\16\1\u012d\17\16\13\0\1\56\2\0\1\16"+
    "\1\12\5\16\1\57\3\0\1\16\1\60\2\0\24\16"+
    "\1\u012e\4\16\13\0\1\56\2\0\1\16\1\12\5\16"+
    "\1\57\3\0\1\16\1\60\2\0\16\16\1\u012f\12\16"+
    "\13\0\1\56\2\0\1\16\1\12\5\16\1\57\3\0"+
    "\1\16\1\60\2\0\3\16\1\u0130\25\16\13\0\1\56"+
    "\2\0\1\16\1\12\5\16\1\57\3\0\1\16\1\60"+
    "\2\0\23\16\1\u0131\5\16\13\0\1\56\2\0\1\16"+
    "\1\12\5\16\1\57\3\0\1\16\1\60\2\0\2\16"+
    "\1\u0132\26\16\13\0\1\56\2\0\1\16\1\12\5\16"+
    "\1\57\3\0\1\16\1\60\2\0\11\16\1\377\17\16"+
    "\13\0\1\56\2\0\1\16\1\12\5\16\1\57\3\0"+
    "\1\16\1\60\2\0\1\16\1\u0133\1\u0134\4\16\1\u0135"+
    "\7\16\1\u0136\1\16\1\u0137\7\16\13\0\1\56\2\0"+
    "\1\16\1\12\5\16\1\57\3\0\1\16\1\60\2\0"+
    "\1\16\1\u0138\27\16\13\0\1\56\2\0\1\16\1\12"+
    "\5\16\1\57\3\0\1\16\1\60\2\0\13\16\1\u0139"+
    "\15\16\13\0\1\56\2\0\1\16\1\12\5\16\1\57"+
    "\3\0\1\16\1\60\2\0\16\16\1\230\12\16\13\0"+
    "\1\56\2\0\1\16\1\12\5\16\1\57\3\0\1\16"+
    "\1\60\2\0\3\16\1\u013a\25\16\13\0\1\56\2\0"+
    "\1\16\1\12\5\16\1\57\3\0\1\16\1\60\2\0"+
    "\23\16\1\165\5\16\13\0\1\56\2\0\1\16\1\12"+
    "\5\16\1\57\3\0\1\16\1\60\2\0\5\16\1\u013b"+
    "\23\16\13\0\1\56\2\0\1\16\1\12\5\16\1\57"+
    "\3\0\1\16\1\60\2\0\15\16\1\u0112\13\16\13\0"+
    "\1\56\2\0\1\16\1\12\5\16\1\57\3\0\1\16"+
    "\1\60\2\0\23\16\1\u013c\5\16\13\0\1\56\2\0"+
    "\1\16\1\12\5\16\1\57\3\0\1\16\1\60\2\0"+
    "\11\16\1\u013d\17\16\13\0\1\56\2\0\1\16\1\12"+
    "\5\16\1\57\3\0\1\16\1\60\2\0\11\16\1\u013e"+
    "\17\16\13\0\1\56\2\0\1\16\1\12\5\16\1\57"+
    "\3\0\1\16\1\60\2\0\21\16\1\364\7\16\13\0"+
    "\1\56\2\0\1\16\1\12\5\16\1\57\3\0\1\16"+
    "\1\60\2\0\13\16\1\u013f\15\16\13\0\1\56\2\0"+
    "\1\16\1\12\5\16\1\57\3\0\1\16\1\60\2\0"+
    "\11\16\1\u0140\17\16\13\0\1\56\2\0\1\16\1\12"+
    "\5\16\1\57\3\0\1\16\1\60\2\0\16\16\1\u0141"+
    "\12\16\13\0\1\56\2\0\1\16\1\12\5\16\1\57"+
    "\3\0\1\16\1\60\2\0\24\16\1\u0142\4\16\13\0"+
    "\1\56\2\0\1\16\1\12\5\16\1\57\3\0\1\16"+
    "\1\60\2\0\26\16\1\100\2\16\13\0\1\56\2\0"+
    "\1\16\1\12\5\16\1\57\3\0\1\16\1\60\2\0"+
    "\11\16\1\u0143\17\16\13\0\1\56\2\0\1\16\1\12"+
    "\5\16\1\57\3\0\1\16\1\60\2\0\22\16\1\100"+
    "\6\16\13\0\1\56\2\0\1\16\1\12\5\16\1\57"+
    "\3\0\1\16\1\60\2\0\1\u0144\30\16\13\0\1\56"+
    "\2\0\1\16\1\12\5\16\1\57\3\0\1\16\1\60"+
    "\2\0\5\16\1\u0145\23\16\13\0\1\56\2\0\1\16"+
    "\1\12\5\16\1\57\3\0\1\16\1\60\2\0\11\16"+
    "\1\201\16\16\1\100\13\0\1\56\2\0\1\16\1\12"+
    "\5\16\1\57\3\0\1\16\1\60\2\0\17\16\1\u0146"+
    "\11\16\13\0\1\56\2\0\1\16\1\12\5\16\1\57"+
    "\3\0\1\16\1\60\2\0\5\16\1\u0147\23\16\13\0"+
    "\1\56\2\0\1\16\1\12\5\16\1\57\3\0\1\16"+
    "\1\60\2\0\15\16\1\206\13\16\13\0\1\56\2\0"+
    "\1\16\1\12\5\16\1\57\3\0\1\16\1\60\2\0"+
    "\6\16\1\u0148\22\16\13\0\1\56\2\0\1\16\1\12"+
    "\5\16\1\57\3\0\1\16\1\60\2\0\21\16\1\u011f"+
    "\7\16\13\0\1\56\2\0\1\16\1\12\5\16\1\57"+
    "\3\0\1\16\1\60\2\0\5\16\1\u0149\23\16\13\0"+
    "\1\56\2\0\1\16\1\12\5\16\1\57\3\0\1\16"+
    "\1\60\2\0\3\16\1\206\25\16\13\0\1\56\2\0"+
    "\1\16\1\12\5\16\1\57\3\0\1\16\1\60\2\0"+
    "\16\16\1\u0138\12\16\13\0\1\56\2\0\1\16\1\12"+
    "\5\16\1\57\3\0\1\16\1\60\2\0\1\16\1\u014a"+
    "\27\16\13\0\1\56\2\0\1\16\1\12\5\16\1\57"+
    "\3\0\1\16\1\60\2\0\7\16\1\100\21\16\13\0"+
    "\1\56\2\0\1\16\1\12\5\16\1\57\3\0\1\16"+
    "\1\60\2\0\25\16\1\370\3\16\13\0\1\56\2\0"+
    "\1\16\1\12\5\16\1\57\3\0\1\16\1\60\2\0"+
    "\7\16\1\u014b\21\16\13\0\1\56\2\0\1\16\1\12"+
    "\5\16\1\57\3\0\1\16\1\60\2\0\26\16\1\275"+
    "\2\16\13\0\1\56\2\0\1\16\1\12\5\16\1\57"+
    "\3\0\1\16\1\60\2\0\5\16\1\u014c\23\16\13\0"+
    "\1\56\2\0\1\16\1\12\5\16\1\57\3\0\1\16"+
    "\1\60\2\0\24\16\1\326\4\16\13\0\1\56\2\0"+
    "\1\16\1\12\5\16\1\57\3\0\1\16\1\60\2\0"+
    "\24\16\1\u014d\4\16\13\0\1\56\2\0\1\16\1\12"+
    "\5\16\1\57\3\0\1\16\1\60\2\0\20\16\1\71"+
    "\10\16\13\0\1\56\2\0\1\16\1\12\5\16\1\57"+
    "\3\0\1\16\1\60\2\0\13\16\1\u014e\15\16\13\0"+
    "\1\56\2\0\1\16\1\12\5\16\1\57\3\0\1\16"+
    "\1\60\2\0\21\16\1\u014f\7\16\13\0\1\56\2\0"+
    "\1\16\1\12\5\16\1\57\3\0\1\16\1\60\2\0"+
    "\24\16\1\u0150\4\16\13\0\1\56\2\0\1\16\1\12"+
    "\5\16\1\57\3\0\1\16\1\60\2\0\5\16\1\246"+
    "\23\16\13\0\1\56\2\0\1\16\1\12\5\16\1\57"+
    "\3\0\1\16\1\60\2\0\3\16\1\u0151\25\16\13\0"+
    "\1\56\2\0\1\16\1\12\5\16\1\57\3\0\1\16"+
    "\1\60\2\0\23\16\1\u0152\5\16\13\0\1\56\2\0"+
    "\1\16\1\12\5\16\1\57\3\0\1\16\1\60\2\0"+
    "\24\16\1\u0153\4\16\13\0\1\56\2\0\1\16\1\12"+
    "\5\16\1\57\3\0\1\16\1\60\2\0\10\16\1\305"+
    "\20\16\13\0\1\56\2\0\1\16\1\12\5\16\1\57"+
    "\3\0\1\16\1\60\2\0\5\16\1\u0154\23\16\13\0"+
    "\1\56\2\0\1\16\1\12\5\16\1\57\3\0\1\16"+
    "\1\60\2\0\16\16\1\u0155\12\16\13\0\1\56\2\0"+
    "\1\16\1\12\5\16\1\57\3\0\1\16\1\60\2\0"+
    "\16\16\1\u0156\12\16\13\0\1\56\2\0\1\16\1\12"+
    "\5\16\1\57\3\0\1\16\1\60\2\0\16\16\1\u0157"+
    "\12\16\13\0\1\56\2\0\1\16\1\12\5\16\1\57"+
    "\3\0\1\16\1\60\2\0\4\16\1\245\24\16\13\0"+
    "\1\56\2\0\1\16\1\12\5\16\1\57\3\0\1\16"+
    "\1\60\2\0\13\16\1\245\15\16\13\0\1\56\2\0"+
    "\1\16\1\12\5\16\1\57\3\0\1\16\1\60\2\0"+
    "\23\16\1\206\5\16\13\0\1\56\2\0\1\16\1\12"+
    "\5\16\1\57\3\0\1\16\1\60\2\0\17\16\1\u0136"+
    "\11\16\13\0\1\56\2\0\1\16\1\12\5\16\1\57"+
    "\3\0\1\16\1\60\2\0\22\16\1\u0158\6\16\13\0"+
    "\1\56\2\0\1\16\1\12\5\16\1\57\3\0\1\16"+
    "\1\60\2\0\13\16\1\u0159\15\16\13\0\1\56\2\0"+
    "\1\16\1\12\5\16\1\57\3\0\1\16\1\60\2\0"+
    "\4\16\1\u015a\24\16\13\0\1\56\2\0\1\16\1\12"+
    "\5\16\1\57\3\0\1\16\1\60\2\0\24\16\1\67"+
    "\4\16\13\0\1\56\2\0\1\16\1\12\5\16\1\57"+
    "\3\0\1\16\1\60\2\0\22\16\1\u011f\6\16\13\0"+
    "\1\56\2\0\1\16\1\12\5\16\1\57\3\0\1\16"+
    "\1\60\2\0\23\16\1\216\5\16\13\0\1\56\2\0"+
    "\1\16\1\12\5\16\1\57\3\0\1\16\1\60\2\0"+
    "\10\16\1\100\20\16\13\0\1\56\2\0\1\16\1\12"+
    "\5\16\1\57\3\0\1\16\1\60\2\0\14\16\1\u015b"+
    "\14\16\13\0\1\56\2\0\1\16\1\12\5\16\1\57"+
    "\3\0\1\16\1\60\2\0\23\16\1\245\5\16\13\0"+
    "\1\56\2\0\1\16\1\12\5\16\1\57\3\0\1\16"+
    "\1\60\2\0\24\16\1\212\4\16\13\0\1\56\2\0"+
    "\1\16\1\12\5\16\1\57\3\0\1\16\1\60\2\0"+
    "\1\16\1\u015c\3\16\1\250\23\16\13\0\1\56\2\0"+
    "\1\16\1\12\5\16\1\57\3\0\1\16\1\60\2\0"+
    "\21\16\1\u015d\7\16\13\0\1\56\2\0\1\16\1\12"+
    "\5\16\1\57\3\0\1\16\1\60\2\0\12\16\1\165"+
    "\16\16\13\0\1\56\2\0\1\16\1\12\5\16\1\57"+
    "\3\0\1\16\1\60\2\0\7\16\1\u015e\21\16\13\0"+
    "\1\56\2\0\1\16\1\12\5\16\1\57\3\0\1\16"+
    "\1\60\2\0\13\16\1\u015f\15\16\13\0\1\56\2\0"+
    "\1\16\1\12\5\16\1\57\3\0\1\16\1\60\2\0"+
    "\15\16\1\u0160\13\16\13\0\1\56\2\0\1\16\1\12"+
    "\5\16\1\57\3\0\1\16\1\60\2\0\14\16\1\245"+
    "\14\16\13\0\1\56\2\0\1\16\1\12\5\16\1\57"+
    "\3\0\1\16\1\60\2\0\1\16\1\u0161\27\16\13\0"+
    "\1\56\2\0\1\16\1\12\5\16\1\57\3\0\1\16"+
    "\1\60\2\0\15\16\1\165\13\16\13\0\1\56\2\0"+
    "\1\16\1\12\5\16\1\57\3\0\1\16\1\60\2\0"+
    "\30\16\1\u0162\13\0\1\56\2\0\1\16\1\12\5\16"+
    "\1\57\3\0\1\16\1\60\2\0\1\u0163\30\16\13\0"+
    "\1\56\2\0\1\16\1\12\5\16\1\57\3\0\1\16"+
    "\1\60\2\0\5\16\1\u0114\23\16\13\0\1\56\2\0"+
    "\1\16\1\12\5\16\1\57\3\0\1\16\1\60\2\0"+
    "\30\16\1\275\13\0\1\56\2\0\1\16\1\12\5\16"+
    "\1\57\3\0\1\16\1\60\2\0\17\16\1\u0164\11\16"+
    "\13\0\1\56\2\0\1\16\1\12\5\16\1\57\3\0"+
    "\1\16\1\60\2\0\1\16\1\u0165\27\16\13\0\1\56"+
    "\2\0\1\16\1\12\5\16\1\57\3\0\1\16\1\60"+
    "\2\0\23\16\1\u0166\5\16\13\0\1\56\2\0\1\16"+
    "\1\12\5\16\1\57\3\0\1\16\1\60\2\0\3\16"+
    "\1\245\25\16\13\0\1\56\2\0\1\16\1\12\5\16"+
    "\1\57\3\0\1\16\1\60\2\0\4\16\1\165\24\16"+
    "\13\0\1\56\2\0\1\16\1\12\5\16\1\57\3\0"+
    "\1\16\1\60\2\0\1\u0167\30\16\13\0\1\56\2\0"+
    "\1\16\1\12\1\16\1\u0168\1\u0169\1\16\1\100\1\57"+
    "\3\0\1\16\1\60\2\0\31\16\13\0\1\56\2\0"+
    "\1\16\1\12\5\16\1\57\3\0\1\16\1\60\2\0"+
    "\13\16\1\212\15\16\13\0\1\56\2\0\1\16\1\12"+
    "\5\16\1\57\3\0\1\16\1\60\2\0\14\16\1\u016a"+
    "\14\16\13\0\1\56\2\0\1\16\1\12\5\16\1\57"+
    "\3\0\1\16\1\60\2\0\30\16\1\165\13\0\1\56"+
    "\2\0\1\16\1\12\5\16\1\57\3\0\1\16\1\60"+
    "\2\0\2\16\1\u016b\26\16\13\0\1\56\2\0\1\16"+
    "\1\12\1\100\1\16\1\100\2\16\1\57\3\0\1\16"+
    "\1\60\2\0\31\16\13\0\1\56\2\0\1\16\1\12"+
    "\1\100\4\16\1\57\3\0\1\16\1\60\2\0\31\16"+
    "\13\0\1\56\2\0\1\16\1\12\5\16\1\57\3\0"+
    "\1\16\1\60\2\0\5\16\1\u016c\23\16\13\0\1\56"+
    "\2\0\1\16\1\12\5\16\1\57\3\0\1\16\1\60"+
    "\2\0\1\16\1\237\27\16\13\0\1\56\2\0\1\16"+
    "\1\12\5\16\1\57\3\0\1\16\1\60\2\0\14\16"+
    "\1\u011b\14\16\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[18738];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\50\1\1\0\1\1\1\11\3\0\2\1"+
    "\1\0\103\1\1\0\1\1\2\0\2\1\1\0\1\1"+
    "\1\0\117\1\1\11\235\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[364];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  McFunctionLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 15: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 16: break;
          case 3:
            { yybegin(YYINITIAL); return McFunctionTypes.COMMENT;
            }
          // fall through
          case 17: break;
          case 4:
            { return McFunctionTypes.IDENTIFIER;
            }
          // fall through
          case 18: break;
          case 5:
            { return McFunctionTypes.NUMBER;
            }
          // fall through
          case 19: break;
          case 6:
            { return McFunctionTypes.OPERATOR;
            }
          // fall through
          case 20: break;
          case 7:
            { return McFunctionTypes.COORDINATE;
            }
          // fall through
          case 21: break;
          case 8:
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 22: break;
          case 9:
            { return McFunctionTypes.STRING;
            }
          // fall through
          case 23: break;
          case 10:
            { return McFunctionTypes.SELECTOR;
            }
          // fall through
          case 24: break;
          case 11:
            { return McFunctionTypes.COMMAND_ARGUMENT;
            }
          // fall through
          case 25: break;
          case 12:
            { return McFunctionTypes.COMMAND;
            }
          // fall through
          case 26: break;
          case 13:
            { return McFunctionTypes.JSON;
            }
          // fall through
          case 27: break;
          case 14:
            { return McFunctionTypes.COLOR;
            }
          // fall through
          case 28: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
