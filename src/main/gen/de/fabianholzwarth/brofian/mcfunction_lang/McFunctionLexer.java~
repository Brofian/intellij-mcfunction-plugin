// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: src/main/java/de/fabianholzwarth/brofian/mcfunction_lang/McFunction.flex

// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
package de.fabianholzwarth.brofian.mcfunction_lang;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import de.fabianholzwarth.brofian.mcfunction_lang.psi.McFunctionTypes;


class McFunctionLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\5\u0100\1\u0200\1\u0300\1\u0100\5\u0400\1\u0500\1\u0600"+
    "\1\u0700\6\u0100\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00"+
    "\3\u0100\1\u0e00\205\u0100\1\u0600\1\u0100\1\u0f00\1\u1000\1\u1100"+
    "\1\u1200\54\u0100\10\u1300\37\u0100\1\u0900\4\u0100\1\u1400\10\u0100"+
    "\1\u1500\2\u0100\1\u1600\1\u1700\1\u1200\1\u0100\1\u0500\1\u0100"+
    "\1\u1800\1\u1500\1\u0800\3\u0100\1\u1100\1\u1900\114\u0100\1\u1a00"+
    "\1\u1100\153\u0100\1\u1b00\11\u0100\1\u1c00\1\u1200\6\u0100\1\u1100"+
    "\u0f16\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\0\1\6\1\7\1\0\1\10\4\0\2\10\1\11"+
    "\1\12\1\13\1\10\1\14\1\15\1\16\3\17\1\20"+
    "\3\17\1\21\1\0\1\22\1\23\1\22\1\0\1\24"+
    "\32\25\1\26\1\0\1\27\1\30\1\31\1\0\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\25\1\63\1\0\1\64\1\30\6\0\1\3\u01da\0"+
    "\12\65\206\0\12\65\306\0\12\65\234\0\12\65\166\0"+
    "\12\65\140\0\12\65\166\0\12\65\106\0\12\65\u0116\0"+
    "\12\65\106\0\12\65\u0146\0\12\65\46\0\12\65\u012c\0"+
    "\12\65\200\0\12\65\246\0\12\65\6\0\12\65\266\0"+
    "\12\65\126\0\12\65\206\0\12\65\6\0\12\65\316\0"+
    "\2\3\u01a6\0\12\65\46\0\12\65\306\0\12\65\26\0"+
    "\12\65\126\0\12\65\u0196\0\12\65\6\0\u0100\66\240\0"+
    "\12\65\206\0\12\65\u012c\0\12\65\200\0\12\65\74\0"+
    "\12\65\220\0\12\65\166\0\12\65\146\0\12\65\206\0"+
    "\12\65\106\0\12\65\266\0\12\65\u0164\0\62\65\100\0"+
    "\12\65\266\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[7424];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\3\2\1\1\1\3\1\1\2\4\1\5"+
    "\1\6\1\1\1\4\1\1\1\7\31\4\1\1\1\5"+
    "\1\10\1\0\1\11\1\6\3\0\1\4\1\12\1\0"+
    "\1\13\1\0\1\7\5\4\1\14\6\4\1\14\42\4"+
    "\1\15\32\4\1\15\1\4\1\0\1\13\2\0\2\5"+
    "\1\0\1\7\1\0\102\4\1\14\2\4\1\16\3\4"+
    "\1\14\16\4\1\12\1\7\15\4\1\15\13\4\1\15"+
    "\62\4\1\14\37\4\1\14\32\4\1\6\11\4\1\14"+
    "\12\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[387];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\u01ef\0\u0226\0\u0181\0\u025d\0\u0294\0\u02cb\0\u0302"+
    "\0\u0339\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483\0\u04ba"+
    "\0\u04f1\0\u0528\0\u055f\0\u0596\0\u05cd\0\u0604\0\u063b\0\u0672"+
    "\0\u06a9\0\u06e0\0\u0717\0\u074e\0\u0785\0\u07bc\0\u07f3\0\u082a"+
    "\0\u0861\0\u0898\0\u08cf\0\245\0\u0113\0\u0113\0\67\0\u0906"+
    "\0\u093d\0\u0974\0\u09ab\0\u09e2\0\u02cb\0\u02cb\0\u0a19\0\u0a50"+
    "\0\u0a87\0\u0abe\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08"+
    "\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4\0\u0294\0\u0d1b\0\u0d52\0\u0d89"+
    "\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41"+
    "\0\u0f78\0\u0faf\0\u0fe6\0\u101d\0\u1054\0\u108b\0\u10c2\0\u10f9"+
    "\0\u1130\0\u1167\0\u119e\0\u11d5\0\u120c\0\u1243\0\u127a\0\u12b1"+
    "\0\u12e8\0\u131f\0\u1356\0\u138d\0\u13c4\0\u13fb\0\u1432\0\u1469"+
    "\0\u14a0\0\u14d7\0\u150e\0\u1545\0\u157c\0\u15b3\0\u15ea\0\u1621"+
    "\0\u1658\0\u168f\0\u16c6\0\u16fd\0\u1734\0\u176b\0\u17a2\0\u17d9"+
    "\0\u1810\0\u1847\0\u187e\0\u18b5\0\u18ec\0\u1923\0\u195a\0\u1991"+
    "\0\u19c8\0\u19ff\0\u0294\0\u1a36\0\u0898\0\u0898\0\u1a6d\0\u1aa4"+
    "\0\u09ab\0\u1a6d\0\u1adb\0\u1b12\0\u1b49\0\u1b80\0\u1bb7\0\u1bee"+
    "\0\u1c25\0\u1c5c\0\u1c93\0\u1cca\0\u1d01\0\u1d38\0\u1d6f\0\u1da6"+
    "\0\u1ddd\0\u1e14\0\u1e4b\0\u1e82\0\u1eb9\0\u1ef0\0\u1f27\0\u1f5e"+
    "\0\u1f95\0\u1fcc\0\u2003\0\u203a\0\u2071\0\u20a8\0\u20df\0\u2116"+
    "\0\u214d\0\u2184\0\u21bb\0\u21f2\0\u2229\0\u2260\0\u2297\0\u22ce"+
    "\0\u2305\0\u233c\0\u2373\0\u23aa\0\u23e1\0\u2418\0\u244f\0\u2486"+
    "\0\u24bd\0\u24f4\0\u252b\0\u2562\0\u2599\0\u25d0\0\u2607\0\u263e"+
    "\0\u2675\0\u26ac\0\u26e3\0\u271a\0\u2751\0\u2788\0\u27bf\0\u27f6"+
    "\0\u282d\0\u2864\0\u289b\0\u28d2\0\u2909\0\u2940\0\u2977\0\u29ae"+
    "\0\u29e5\0\u2a1c\0\u0294\0\u2a53\0\u2a8a\0\u2ac1\0\u2af8\0\u2b2f"+
    "\0\u2b66\0\u2b9d\0\u2bd4\0\u2c0b\0\u2c42\0\u2c79\0\u2cb0\0\u2ce7"+
    "\0\u2d1e\0\u2d55\0\u2d8c\0\u2dc3\0\u1aa4\0\u1adb\0\67\0\u2dfa"+
    "\0\u2e31\0\u2e68\0\u2e9f\0\u2ed6\0\u2f0d\0\u2f44\0\u2f7b\0\u2fb2"+
    "\0\u2fe9\0\u3020\0\u3057\0\u308e\0\u30c5\0\u30fc\0\u3133\0\u316a"+
    "\0\u31a1\0\u31d8\0\u320f\0\u3246\0\u327d\0\u32b4\0\u32eb\0\u3322"+
    "\0\u3359\0\u3390\0\u33c7\0\u33fe\0\u3435\0\u346c\0\u34a3\0\u34da"+
    "\0\u3511\0\u3548\0\u357f\0\u35b6\0\u35ed\0\u3624\0\u365b\0\u3692"+
    "\0\u36c9\0\u3700\0\u3737\0\u376e\0\u37a5\0\u37dc\0\u3813\0\u384a"+
    "\0\u3881\0\u38b8\0\u38ef\0\u3926\0\u395d\0\u3994\0\u39cb\0\u3a02"+
    "\0\u3a39\0\u3a70\0\u3aa7\0\u3ade\0\u3b15\0\u3b4c\0\u3b83\0\u3bba"+
    "\0\u3bf1\0\u3c28\0\u3c5f\0\u3c96\0\u3ccd\0\u3d04\0\u3d3b\0\u3d72"+
    "\0\u3da9\0\u3de0\0\u3e17\0\u3e4e\0\u3e85\0\u3ebc\0\u3ef3\0\u3f2a"+
    "\0\u3f61\0\u3f98\0\u3fcf\0\u4006\0\u403d\0\u4074\0\u40ab\0\u40e2"+
    "\0\u4119\0\u4150\0\u4187\0\u41be\0\u41f5\0\u422c\0\u4263\0\u429a"+
    "\0\u42d1\0\u4308\0\u433f\0\u4376\0\u43ad\0\u43e4\0\u441b\0\u4452"+
    "\0\u4489\0\u44c0\0\u44f7\0\u2486\0\u452e\0\u4565\0\u459c\0\u45d3"+
    "\0\u460a\0\u4641\0\u4678\0\u46af\0\u46e6\0\u471d\0\u4754\0\u478b"+
    "\0\u47c2\0\u47f9\0\u4830\0\u4867\0\u489e\0\u48d5\0\u490c\0\u4943"+
    "\0\u497a\0\u49b1\0\u49e8\0\u4a1f\0\u4a56\0\u4a8d\0\u0294\0\u4ac4"+
    "\0\u4afb\0\u4b32\0\u4b69\0\u4ba0\0\u4bd7\0\u4c0e\0\u4c45\0\u4c7c"+
    "\0\u4cb3\0\u4cea\0\u4d21\0\u4d58\0\u4d8f\0\u4dc6\0\u4dfd\0\u4e34"+
    "\0\u4e6b\0\u4ea2\0\u4ed9";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[387];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\3\1\5\1\6\1\7\1\10"+
    "\1\2\1\11\1\12\5\13\1\2\1\14\1\2\1\15"+
    "\1\16\1\17\1\2\1\20\1\16\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\2"+
    "\1\53\1\2\70\0\1\3\2\54\1\3\1\54\62\0"+
    "\5\54\62\0\1\54\1\4\3\54\61\0\2\55\4\0"+
    "\1\56\57\55\1\0\2\7\1\0\2\7\1\0\61\7"+
    "\23\0\1\57\52\0\1\60\2\0\1\16\1\12\5\13"+
    "\1\61\1\0\1\57\1\0\1\16\1\62\2\0\32\16"+
    "\2\0\1\53\13\0\7\12\4\0\1\12\1\62\2\0"+
    "\32\12\13\0\1\60\2\0\1\16\1\63\5\13\1\61"+
    "\3\0\1\16\1\62\2\0\32\16\2\0\1\53\12\0"+
    "\1\64\20\0\1\64\3\0\1\64\12\0\1\64\1\0"+
    "\2\64\21\0\1\60\2\0\1\16\1\12\5\16\1\61"+
    "\3\0\1\16\1\62\2\0\32\16\4\0\2\65\4\0"+
    "\21\65\1\66\36\65\13\0\1\67\1\0\5\70\44\0"+
    "\1\70\10\0\1\60\2\0\1\16\1\12\5\16\1\61"+
    "\3\0\1\16\1\62\2\0\4\16\1\71\1\16\1\72"+
    "\5\16\1\73\3\16\1\74\1\75\2\16\1\76\1\16"+
    "\1\77\3\16\13\0\1\60\2\0\1\16\1\12\5\16"+
    "\1\61\3\0\1\16\1\62\2\0\1\16\1\100\3\16"+
    "\1\101\3\16\1\102\2\16\1\103\2\16\1\104\11\16"+
    "\1\105\13\0\1\60\2\0\1\16\1\12\5\16\1\61"+
    "\3\0\1\16\1\62\2\0\14\16\1\106\2\16\1\107"+
    "\2\16\1\110\7\16\13\0\1\60\2\0\1\16\1\12"+
    "\5\16\1\61\3\0\1\16\1\62\2\0\1\16\1\111"+
    "\3\16\1\112\3\16\1\113\20\16\13\0\1\60\2\0"+
    "\1\16\1\12\5\16\1\61\3\0\1\16\1\62\2\0"+
    "\1\16\1\114\4\16\1\115\7\16\1\116\7\16\1\117"+
    "\1\16\1\120\1\16\13\0\1\60\2\0\1\16\1\12"+
    "\5\16\1\61\3\0\1\16\1\62\2\0\1\16\1\121"+
    "\7\16\1\122\5\16\1\123\2\16\1\124\2\16\1\125"+
    "\4\16\13\0\1\60\2\0\1\16\1\12\5\16\1\61"+
    "\3\0\1\16\1\62\2\0\1\16\1\126\3\16\1\127"+
    "\3\16\1\130\5\16\1\131\2\16\1\132\7\16\13\0"+
    "\1\60\2\0\1\16\1\12\5\16\1\61\3\0\1\16"+
    "\1\62\2\0\1\16\1\133\3\16\1\134\11\16\1\135"+
    "\12\16\13\0\1\60\2\0\1\16\1\12\5\16\1\61"+
    "\3\0\1\16\1\62\2\0\16\16\1\136\5\16\1\137"+
    "\5\16\13\0\1\60\2\0\1\16\1\12\5\16\1\61"+
    "\3\0\1\16\1\62\2\0\6\16\1\140\23\16\13\0"+
    "\1\60\2\0\1\16\1\12\5\16\1\61\3\0\1\16"+
    "\1\62\2\0\5\16\1\141\3\16\1\142\20\16\13\0"+
    "\1\60\2\0\1\16\1\12\5\16\1\61\3\0\1\16"+
    "\1\62\2\0\1\16\1\143\3\16\1\144\3\16\1\145"+
    "\5\16\1\146\12\16\13\0\1\60\2\0\1\16\1\12"+
    "\5\16\1\61\3\0\1\16\1\62\2\0\1\16\1\147"+
    "\3\16\1\150\3\16\1\151\5\16\1\152\5\16\1\153"+
    "\4\16\13\0\1\60\2\0\1\16\1\12\5\16\1\61"+
    "\3\0\1\16\1\62\2\0\1\16\1\154\15\16\1\155"+
    "\12\16\13\0\1\60\2\0\1\16\1\12\5\16\1\61"+
    "\3\0\1\16\1\62\2\0\6\16\1\156\7\16\1\157"+
    "\6\16\1\160\4\16\13\0\1\60\2\0\1\16\1\12"+
    "\5\16\1\61\3\0\1\16\1\62\2\0\5\16\1\161"+
    "\6\16\1\162\2\16\1\163\2\16\1\164\7\16\13\0"+
    "\1\60\2\0\1\16\1\12\5\16\1\61\3\0\1\16"+
    "\1\62\2\0\25\16\1\165\4\16\13\0\1\60\2\0"+
    "\1\16\1\12\5\16\1\61\3\0\1\16\1\62\2\0"+
    "\5\16\1\166\24\16\13\0\1\60\2\0\1\16\1\12"+
    "\5\16\1\61\3\0\1\16\1\62\2\0\5\16\1\167"+
    "\12\16\1\170\3\16\1\171\1\172\4\16\13\0\1\60"+
    "\2\0\1\16\1\12\5\16\1\61\3\0\1\16\1\62"+
    "\2\0\10\16\1\173\6\16\1\105\2\16\1\174\7\16"+
    "\13\0\1\60\2\0\1\16\1\12\5\16\1\61\3\0"+
    "\1\16\1\62\2\0\16\16\1\175\6\16\1\176\4\16"+
    "\13\0\1\60\2\0\1\16\1\12\5\16\1\61\3\0"+
    "\1\16\1\62\2\0\1\16\1\177\7\16\1\200\20\16"+
    "\13\0\1\60\2\0\1\16\1\12\5\16\1\61\3\0"+
    "\1\16\1\62\2\0\10\16\1\201\1\202\20\16\13\0"+
    "\1\60\2\0\1\16\1\12\5\16\1\61\3\0\1\16"+
    "\1\62\2\0\20\16\1\203\11\16\13\0\1\60\2\0"+
    "\1\16\1\12\5\16\1\61\3\0\1\16\1\62\2\0"+
    "\5\16\1\204\24\16\4\0\2\205\4\0\56\205\1\206"+
    "\1\205\14\0\1\207\5\53\44\0\1\53\10\0\1\60"+
    "\2\0\1\60\1\0\5\60\1\61\3\0\1\60\3\0"+
    "\32\60\16\0\7\12\4\0\1\12\3\0\32\12\4\0"+
    "\2\210\4\0\60\210\13\0\2\12\5\211\4\0\1\12"+
    "\1\62\2\0\32\12\2\0\1\212\27\0\1\213\54\0"+
    "\5\214\44\0\1\214\14\0\1\215\5\70\44\0\1\70"+
    "\10\0\1\60\2\0\1\16\1\12\5\16\1\61\3\0"+
    "\1\16\1\62\2\0\4\16\1\105\21\16\1\216\3\16"+
    "\13\0\1\60\2\0\1\16\1\12\5\16\1\61\3\0"+
    "\1\16\1\62\2\0\24\16\1\217\5\16\13\0\1\60"+
    "\2\0\1\16\1\12\5\16\1\61\3\0\1\16\1\62"+
    "\2\0\14\16\1\105\15\16\13\0\1\60\2\0\1\16"+
    "\1\12\5\16\1\61\3\0\1\16\1\62\2\0\20\16"+
    "\1\220\11\16\13\0\1\60\2\0\1\16\1\12\5\16"+
    "\1\61\3\0\1\16\1\62\2\0\25\16\1\221\4\16"+
    "\13\0\1\60\2\0\1\16\1\12\5\16\1\61\3\0"+
    "\1\16\1\62\2\0\24\16\1\222\5\16\13\0\1\60"+
    "\2\0\1\16\1\12\5\16\1\61\3\0\1\16\1\62"+
    "\2\0\1\16\1\223\30\16\13\0\1\60\2\0\1\16"+
    "\1\12\5\16\1\61\3\0\1\16\1\62\2\0\16\16"+
    "\1\203\4\16\1\224\6\16\13\0\1\60\2\0\1\16"+
    "\1\12\5\16\1\61\3\0\1\16\1\62\2\0\6\16"+
    "\1\225\23\16\13\0\1\60\2\0\1\16\1\12\5\16"+
    "\1\61\3\0\1\16\1\62\2\0\17\16\1\154\12\16"+
    "\13\0\1\60\2\0\1\16\1\12\5\16\1\61\3\0"+
    "\1\16\1\62\2\0\1\16\1\226\15\16\1\227\5\16"+
    "\1\230\4\16\13\0\1\60\2\0\1\16\1\12\5\16"+
    "\1\61\3\0\1\16\1\62\2\0\23\16\1\231\6\16"+
    "\13\0\1\60\2\0\1\16\1\12\5\16\1\61\3\0"+
    "\1\16\1\62\2\0\5\16\1\232\11\16\1\233\12\16"+
    "\13\0\1\60\2\0\1\16\1\12\5\16\1\61\3\0"+
    "\1\16\1\62\2\0\14\16\1\234\15\16\13\0\1\60"+
    "\2\0\1\16\1\12\5\16\1\61\3\0\1\16\1\62"+
    "\2\0\5\16\1\235\24\16\13\0\1\60\2\0\1\16"+
    "\1\12\5\16\1\61\3\0\1\16\1\62\2\0\15\16"+
    "\1\236\4\16\1\237\1\16\1\240\5\16\13\0\1\60"+
    "\2\0\1\16\1\12\5\16\1\61\3\0\1\16\1\62"+
    "\2\0\2\16\1\241\3\16\1\242\14\16\1\243\6\16"+
    "\13\0\1\60\2\0\1\16\1\12\5\16\1\61\3\0"+
    "\1\16\1\62\2\0\6\16\1\244\14\16\1\245\6\16"+
    "\13\0\1\60\2\0\1\16\1\12\5\16\1\61\3\0"+
    "\1\16\1\62\2\0\23\16\1\246\6\16\13\0\1\60"+
    "\2\0\1\16\1\12\5\16\1\61\3\0\1\16\1\62"+
    "\2\0\6\16\1\247\23\16\13\0\1\60\2\0\1\16"+
    "\1\12\5\16\1\61\3\0\1\16\1\62\2\0\1\16"+
    "\1\250\1\16\1\251\20\16\1\252\5\16\13\0\1\60"+
    "\2\0\1\16\1\12\5\16\1\61\3\0\1\16\1\62"+
    "\2\0\5\16\1\253\24\16\13\0\1\60\2\0\1\16"+
    "\1\12\5\16\1\61\3\0\1\16\1\62\2\0\20\16"+
    "\1\254\11\16\13\0\1\60\2\0\1\16\1\12\5\16"+
    "\1\61\3\0\1\16\1\62\2\0\14\16\1\255\15\16"+
    "\13\0\1\60\2\0\1\16\1\12\5\16\1\61\3\0"+
    "\1\16\1\62\2\0\14\16\1\256\5\16\1\143\1\257"+
    "\6\16\13\0\1\60\2\0\1\16\1\12\5\16\1\61"+
    "\3\0\1\16\1\62\2\0\22\16\1\260\7\16\13\0"+
    "\1\60\2\0\1\16\1\12\5\16\1\61\3\0\1\16"+
    "\1\62\2\0\17\16\1\261\12\16\13\0\1\60\2\0"+
    "\1\16\1\12\5\16\1\61\3\0\1\16\1\62\2\0"+
    "\16\16\1\262\13\16\13\0\1\60\2\0\1\16\1\12"+
    "\5\16\1\61\3\0\1\16\1\62\2\0\15\16\1\263"+
    "\14\16\13\0\1\60\2\0\1\16\1\12\5\16\1\61"+
    "\3\0\1\16\1\62\2\0\24\16\1\105\5\16\13\0"+
    "\1\60\2\0\1\16\1\12\5\16\1\61\3\0\1\16"+
    "\1\62\2\0\26\16\1\264\3\16\13\0\1\60\2\0"+
    "\1\16\1\12\5\16\1\61\3\0\1\16\1\62\2\0"+
    "\14\16\1\265\15\16\13\0\1\60\2\0\1\16\1\12"+
    "\5\16\1\61\3\0\1\16\1\62\2\0\1\16\1\266"+
    "\3\16\1\267\24\16\13\0\1\60\2\0\1\16\1\12"+
    "\5\16\1\61\3\0\1\16\1\62\2\0\22\16\1\270"+
    "\7\16\13\0\1\60\2\0\1\16\1\12\5\16\1\61"+
    "\3\0\1\16\1\62\2\0\14\16\1\50\15\16\13\0"+
    "\1\60\2\0\1\16\1\12\5\16\1\61\3\0\1\16"+
    "\1\62\2\0\14\16\1\271\15\16\13\0\1\60\2\0"+
    "\1\16\1\12\5\16\1\61\3\0\1\16\1\62\2\0"+
    "\6\16\1\272\14\16\1\273\6\16\13\0\1\60\2\0"+
    "\1\16\1\12\5\16\1\61\3\0\1\16\1\62\2\0"+
    "\5\16\1\274\24\16\13\0\1\60\2\0\1\16\1\12"+
    "\5\16\1\61\3\0\1\16\1\62\2\0\22\16\1\203"+
    "\7\16\13\0\1\60\2\0\1\16\1\12\5\16\1\61"+
    "\3\0\1\16\1\62\2\0\5\16\1\275\24\16\13\0"+
    "\1\60\2\0\1\16\1\12\5\16\1\61\3\0\1\16"+
    "\1\62\2\0\3\16\1\276\10\16\1\277\15\16\13\0"+
    "\1\60\2\0\1\16\1\12\5\16\1\61\3\0\1\16"+
    "\1\62\2\0\23\16\1\127\6\16\13\0\1\60\2\0"+
    "\1\16\1\12\5\16\1\61\3\0\1\16\1\62\2\0"+
    "\26\16\1\300\3\16\13\0\1\60\2\0\1\16\1\12"+
    "\5\16\1\61\3\0\1\16\1\62\2\0\7\16\1\301"+
    "\13\16\1\302\6\16\13\0\1\60\2\0\1\16\1\12"+
    "\5\16\1\61\3\0\1\16\1\62\2\0\3\16\1\303"+
    "\13\16\1\302\12\16\13\0\1\60\2\0\1\16\1\12"+
    "\5\16\1\61\3\0\1\16\1\62\2\0\11\16\1\304"+
    "\11\16\1\305\1\306\3\16\1\105\1\16\13\0\1\60"+
    "\2\0\1\16\1\12\5\16\1\61\3\0\1\16\1\62"+
    "\2\0\22\16\1\307\7\16\13\0\1\60\2\0\1\16"+
    "\1\12\5\16\1\61\3\0\1\16\1\62\2\0\16\16"+
    "\1\224\13\16\13\0\1\60\2\0\1\16\1\12\5\16"+
    "\1\61\3\0\1\16\1\62\2\0\4\16\1\310\21\16"+
    "\1\224\3\16\13\0\1\60\2\0\1\16\1\12\5\16"+
    "\1\61\3\0\1\16\1\62\2\0\14\16\1\311\15\16"+
    "\13\0\1\60\2\0\1\16\1\12\5\16\1\61\3\0"+
    "\1\16\1\62\2\0\15\16\1\224\14\16\13\0\1\60"+
    "\2\0\1\16\1\12\5\16\1\61\3\0\1\16\1\62"+
    "\2\0\22\16\1\312\1\16\1\313\5\16\13\0\1\60"+
    "\2\0\1\16\1\12\5\16\1\61\3\0\1\16\1\62"+
    "\2\0\6\16\1\314\23\16\13\0\1\60\2\0\1\16"+
    "\1\12\5\16\1\61\3\0\1\16\1\62\2\0\14\16"+
    "\1\246\15\16\13\0\1\60\2\0\1\16\1\12\5\16"+
    "\1\61\3\0\1\16\1\62\2\0\24\16\1\315\5\16"+
    "\13\0\1\60\2\0\1\16\1\12\5\16\1\61\3\0"+
    "\1\16\1\62\2\0\1\16\1\316\30\16\13\0\1\60"+
    "\2\0\1\16\1\12\5\16\1\61\3\0\1\16\1\62"+
    "\2\0\1\16\1\317\30\16\13\0\1\60\2\0\1\16"+
    "\1\12\5\16\1\61\3\0\1\16\1\62\2\0\11\16"+
    "\1\320\20\16\13\0\1\60\2\0\1\16\1\12\5\16"+
    "\1\61\3\0\1\16\1\62\2\0\5\16\1\74\11\16"+
    "\1\321\12\16\13\0\1\60\2\0\1\16\1\12\5\16"+
    "\1\61\3\0\1\16\1\62\2\0\5\16\1\322\24\16"+
    "\13\0\1\60\2\0\1\16\1\12\5\16\1\61\3\0"+
    "\1\16\1\62\2\0\4\16\1\323\10\16\1\324\2\16"+
    "\1\325\5\16\1\326\3\16\13\0\1\60\2\0\1\16"+
    "\1\12\5\16\1\61\3\0\1\16\1\62\2\0\24\16"+
    "\1\327\5\16\13\0\1\60\2\0\1\16\1\12\5\16"+
    "\1\61\3\0\1\16\1\62\2\0\1\16\1\330\3\16"+
    "\1\331\24\16\13\0\1\60\2\0\1\16\1\12\5\16"+
    "\1\61\3\0\1\16\1\62\2\0\1\16\1\332\15\16"+
    "\1\333\2\16\1\334\6\16\1\335\13\0\1\60\2\0"+
    "\1\16\1\12\5\16\1\61\3\0\1\16\1\62\2\0"+
    "\22\16\1\336\7\16\13\0\1\60\2\0\1\16\1\12"+
    "\5\16\1\61\3\0\1\16\1\62\2\0\22\16\1\337"+
    "\7\16\13\0\1\60\2\0\1\16\1\12\5\16\1\61"+
    "\3\0\1\16\1\62\2\0\25\16\1\224\4\16\13\0"+
    "\1\60\2\0\1\16\1\12\5\16\1\61\3\0\1\16"+
    "\1\62\2\0\24\16\1\340\5\16\13\0\1\60\2\0"+
    "\1\16\1\12\5\16\1\61\3\0\1\16\1\62\2\0"+
    "\11\16\1\341\20\16\13\0\1\60\2\0\1\16\1\12"+
    "\5\16\1\61\3\0\1\16\1\62\2\0\14\16\1\174"+
    "\15\16\13\0\1\60\2\0\1\16\1\12\5\16\1\61"+
    "\3\0\1\16\1\62\2\0\23\16\1\342\6\16\13\0"+
    "\1\60\2\0\1\16\1\12\5\16\1\61\3\0\1\16"+
    "\1\62\2\0\11\16\1\343\20\16\13\0\1\60\2\0"+
    "\1\16\1\12\5\16\1\61\3\0\1\16\1\62\2\0"+
    "\24\16\1\257\5\16\13\0\1\60\2\0\1\16\1\12"+
    "\5\16\1\61\3\0\1\16\1\62\2\0\14\16\1\344"+
    "\15\16\20\0\5\212\44\0\1\212\1\0\2\210\4\0"+
    "\21\210\1\345\36\210\1\0\2\213\4\0\21\213\1\346"+
    "\36\213\15\0\5\70\44\0\1\70\15\0\5\347\44\0"+
    "\1\347\10\0\1\60\2\0\1\16\1\12\5\16\1\61"+
    "\3\0\1\16\1\62\2\0\1\16\1\350\3\16\1\351"+
    "\24\16\13\0\1\60\2\0\1\16\1\12\5\16\1\61"+
    "\3\0\1\16\1\62\2\0\5\16\1\352\24\16\13\0"+
    "\1\60\2\0\1\16\1\12\5\16\1\61\3\0\1\16"+
    "\1\62\2\0\5\16\1\353\24\16\13\0\1\60\2\0"+
    "\1\16\1\12\5\16\1\61\3\0\1\16\1\62\2\0"+
    "\1\16\1\323\30\16\13\0\1\60\2\0\1\16\1\12"+
    "\5\16\1\61\3\0\1\16\1\62\2\0\22\16\1\354"+
    "\7\16\13\0\1\60\2\0\1\16\1\12\5\16\1\61"+
    "\3\0\1\16\1\62\2\0\11\16\1\355\20\16\13\0"+
    "\1\60\2\0\1\16\1\12\5\16\1\61\3\0\1\16"+
    "\1\62\2\0\5\16\1\105\24\16\13\0\1\60\2\0"+
    "\1\16\1\12\5\16\1\61\3\0\1\16\1\62\2\0"+
    "\17\16\1\356\12\16\13\0\1\60\2\0\1\16\1\12"+
    "\5\16\1\61\3\0\1\16\1\62\2\0\3\16\1\357"+
    "\26\16\13\0\1\60\2\0\1\16\1\12\5\16\1\61"+
    "\3\0\1\16\1\62\2\0\3\16\1\360\26\16\13\0"+
    "\1\60\2\0\1\16\1\12\5\16\1\61\3\0\1\16"+
    "\1\62\2\0\5\16\1\323\24\16\13\0\1\60\2\0"+
    "\1\16\1\12\5\16\1\61\3\0\1\16\1\62\2\0"+
    "\23\16\1\361\6\16\13\0\1\60\2\0\1\16\1\12"+
    "\5\16\1\61\3\0\1\16\1\62\2\0\1\16\1\140"+
    "\30\16\13\0\1\60\2\0\1\16\1\12\5\16\1\61"+
    "\3\0\1\16\1\62\2\0\16\16\1\264\13\16\13\0"+
    "\1\60\2\0\1\16\1\12\5\16\1\61\3\0\1\16"+
    "\1\62\2\0\17\16\1\352\12\16\13\0\1\60\2\0"+
    "\1\16\1\12\5\16\1\61\3\0\1\16\1\62\2\0"+
    "\1\16\1\362\30\16\13\0\1\60\2\0\1\16\1\12"+
    "\5\16\1\61\3\0\1\16\1\62\2\0\1\16\1\363"+
    "\30\16\13\0\1\60\2\0\1\16\1\12\5\16\1\61"+
    "\3\0\1\16\1\62\2\0\13\16\1\364\16\16\13\0"+
    "\1\60\2\0\1\16\1\12\5\16\1\61\3\0\1\16"+
    "\1\62\2\0\1\16\1\365\30\16\13\0\1\60\2\0"+
    "\1\16\1\12\5\16\1\61\3\0\1\16\1\62\2\0"+
    "\25\16\1\366\4\16\13\0\1\60\2\0\1\16\1\12"+
    "\5\16\1\61\3\0\1\16\1\62\2\0\1\16\1\367"+
    "\30\16\13\0\1\60\2\0\1\16\1\12\5\16\1\61"+
    "\3\0\1\16\1\62\2\0\24\16\1\370\5\16\13\0"+
    "\1\60\2\0\1\16\1\12\5\16\1\61\3\0\1\16"+
    "\1\62\2\0\6\16\1\371\23\16\13\0\1\60\2\0"+
    "\1\16\1\12\5\16\1\61\3\0\1\16\1\62\2\0"+
    "\1\16\1\372\30\16\13\0\1\60\2\0\1\16\1\12"+
    "\5\16\1\61\3\0\1\16\1\62\2\0\31\16\1\105"+
    "\13\0\1\60\2\0\1\16\1\12\5\16\1\61\3\0"+
    "\1\16\1\62\2\0\5\16\1\373\24\16\13\0\1\60"+
    "\2\0\1\16\1\12\5\16\1\61\3\0\1\16\1\62"+
    "\2\0\2\16\1\374\27\16\13\0\1\60\2\0\1\16"+
    "\1\12\5\16\1\61\3\0\1\16\1\62\2\0\10\16"+
    "\1\375\21\16\13\0\1\60\2\0\1\16\1\12\5\16"+
    "\1\61\3\0\1\16\1\62\2\0\11\16\1\376\20\16"+
    "\13\0\1\60\2\0\1\16\1\12\5\16\1\61\3\0"+
    "\1\16\1\62\2\0\22\16\1\377\7\16\13\0\1\60"+
    "\2\0\1\16\1\12\5\16\1\61\3\0\1\16\1\62"+
    "\2\0\5\16\1\u0100\24\16\13\0\1\60\2\0\1\16"+
    "\1\12\5\16\1\61\3\0\1\16\1\62\2\0\23\16"+
    "\1\224\6\16\13\0\1\60\2\0\1\16\1\12\5\16"+
    "\1\61\3\0\1\16\1\62\2\0\14\16\1\u0101\7\16"+
    "\1\u0102\5\16\13\0\1\60\2\0\1\16\1\12\5\16"+
    "\1\61\3\0\1\16\1\62\2\0\10\16\1\105\21\16"+
    "\13\0\1\60\2\0\1\16\1\12\5\16\1\61\3\0"+
    "\1\16\1\62\2\0\3\16\1\u0103\26\16\13\0\1\60"+
    "\2\0\1\16\1\12\5\16\1\61\3\0\1\16\1\62"+
    "\2\0\15\16\1\105\14\16\13\0\1\60\2\0\1\16"+
    "\1\12\5\16\1\61\3\0\1\16\1\62\2\0\3\16"+
    "\1\u0104\26\16\13\0\1\60\2\0\1\16\1\12\5\16"+
    "\1\61\3\0\1\16\1\62\2\0\5\16\1\u0105\24\16"+
    "\13\0\1\60\2\0\1\16\1\12\5\16\1\61\3\0"+
    "\1\16\1\62\2\0\5\16\1\203\24\16\13\0\1\60"+
    "\2\0\1\16\1\12\5\16\1\61\3\0\1\16\1\62"+
    "\2\0\4\16\1\323\25\16\13\0\1\60\2\0\1\16"+
    "\1\12\5\16\1\61\3\0\1\16\1\62\2\0\16\16"+
    "\1\127\12\16\1\323\13\0\1\60\2\0\1\16\1\12"+
    "\5\16\1\61\3\0\1\16\1\62\2\0\5\16\1\u0106"+
    "\24\16\13\0\1\60\2\0\1\16\1\12\5\16\1\61"+
    "\3\0\1\16\1\62\2\0\4\16\1\105\25\16\13\0"+
    "\1\60\2\0\1\16\1\12\5\16\1\61\3\0\1\16"+
    "\1\62\2\0\14\16\1\u0107\15\16\13\0\1\60\2\0"+
    "\1\16\1\12\5\16\1\61\3\0\1\16\1\62\2\0"+
    "\11\16\1\u0108\20\16\13\0\1\60\2\0\1\16\1\12"+
    "\5\16\1\61\3\0\1\16\1\62\2\0\5\16\1\332"+
    "\24\16\13\0\1\60\2\0\1\16\1\12\5\16\1\61"+
    "\3\0\1\16\1\62\2\0\15\16\1\203\14\16\13\0"+
    "\1\60\2\0\1\16\1\12\5\16\1\61\3\0\1\16"+
    "\1\62\2\0\20\16\1\105\11\16\13\0\1\60\2\0"+
    "\1\16\1\12\5\16\1\61\3\0\1\16\1\62\2\0"+
    "\13\16\1\203\16\16\13\0\1\60\2\0\1\16\1\12"+
    "\5\16\1\61\3\0\1\16\1\62\2\0\14\16\1\203"+
    "\15\16\13\0\1\60\2\0\1\16\1\12\5\16\1\61"+
    "\3\0\1\16\1\62\2\0\5\16\1\u0109\24\16\13\0"+
    "\1\60\2\0\1\16\1\12\5\16\1\61\3\0\1\16"+
    "\1\62\2\0\10\16\1\u010a\21\16\13\0\1\60\2\0"+
    "\1\16\1\12\5\16\1\61\3\0\1\16\1\62\2\0"+
    "\24\16\1\203\5\16\13\0\1\60\2\0\1\16\1\12"+
    "\5\16\1\61\3\0\1\16\1\62\2\0\1\16\1\u010b"+
    "\30\16\13\0\1\60\2\0\1\16\1\12\5\16\1\61"+
    "\3\0\1\16\1\62\2\0\16\16\1\314\13\16\13\0"+
    "\1\60\2\0\1\16\1\12\5\16\1\61\3\0\1\16"+
    "\1\62\2\0\13\16\1\u010c\16\16\13\0\1\60\2\0"+
    "\1\16\1\12\5\16\1\61\3\0\1\16\1\62\2\0"+
    "\3\16\1\u010d\26\16\13\0\1\60\2\0\1\16\1\12"+
    "\5\16\1\61\3\0\1\16\1\62\2\0\7\16\1\224"+
    "\22\16\13\0\1\60\2\0\1\16\1\12\5\16\1\61"+
    "\3\0\1\16\1\62\2\0\11\16\1\u010e\20\16\13\0"+
    "\1\60\2\0\1\16\1\12\5\16\1\61\3\0\1\16"+
    "\1\62\2\0\24\16\1\u010f\5\16\13\0\1\60\2\0"+
    "\1\16\1\12\5\16\1\61\3\0\1\16\1\62\2\0"+
    "\15\16\1\u0110\14\16\13\0\1\60\2\0\1\16\1\12"+
    "\5\16\1\61\3\0\1\16\1\62\2\0\3\16\1\u0111"+
    "\26\16\13\0\1\60\2\0\1\16\1\12\5\16\1\61"+
    "\3\0\1\16\1\62\2\0\10\16\1\u0112\21\16\13\0"+
    "\1\60\2\0\1\16\1\12\5\16\1\61\3\0\1\16"+
    "\1\62\2\0\14\16\1\u0113\15\16\13\0\1\60\2\0"+
    "\1\16\1\12\5\16\1\61\3\0\1\16\1\62\2\0"+
    "\3\16\1\u0114\26\16\13\0\1\60\2\0\1\16\1\12"+
    "\5\16\1\61\3\0\1\16\1\62\2\0\31\16\1\u0115"+
    "\13\0\1\60\2\0\1\16\1\12\5\16\1\61\3\0"+
    "\1\16\1\62\2\0\16\16\1\u0116\13\16\13\0\1\60"+
    "\2\0\1\16\1\12\5\16\1\61\3\0\1\16\1\62"+
    "\2\0\7\16\1\u0117\22\16\13\0\1\60\2\0\1\16"+
    "\1\12\5\16\1\61\3\0\1\16\1\62\2\0\22\16"+
    "\1\246\7\16\13\0\1\60\2\0\1\16\1\12\5\16"+
    "\1\61\3\0\1\16\1\62\2\0\17\16\1\u0118\12\16"+
    "\13\0\1\60\2\0\1\16\1\12\5\16\1\61\3\0"+
    "\1\16\1\62\2\0\14\16\1\u0119\15\16\13\0\1\60"+
    "\2\0\1\16\1\12\5\16\1\61\3\0\1\16\1\62"+
    "\2\0\17\16\1\u011a\12\16\13\0\1\60\2\0\1\16"+
    "\1\12\5\16\1\61\3\0\1\16\1\62\2\0\2\16"+
    "\1\u011b\27\16\13\0\1\60\2\0\1\16\1\12\5\16"+
    "\1\61\3\0\1\16\1\62\2\0\27\16\1\u011c\2\16"+
    "\13\0\1\60\2\0\1\16\1\12\5\16\1\61\3\0"+
    "\1\16\1\62\2\0\3\16\1\u011d\26\16\13\0\1\60"+
    "\2\0\1\16\1\12\5\16\1\61\3\0\1\16\1\62"+
    "\2\0\22\16\1\127\7\16\13\0\1\60\2\0\1\16"+
    "\1\12\5\16\1\61\3\0\1\16\1\62\2\0\20\16"+
    "\1\105\1\16\1\u011e\7\16\13\0\1\60\2\0\1\16"+
    "\1\12\5\16\1\61\3\0\1\16\1\62\2\0\11\16"+
    "\1\u011f\13\16\1\u0120\4\16\13\0\1\60\2\0\1\16"+
    "\1\12\5\16\1\61\3\0\1\16\1\62\2\0\14\16"+
    "\1\224\15\16\13\0\1\60\2\0\1\16\1\12\5\16"+
    "\1\61\3\0\1\16\1\62\2\0\26\16\1\u0121\3\16"+
    "\13\0\1\60\2\0\1\16\1\12\5\16\1\61\3\0"+
    "\1\16\1\62\2\0\17\16\1\u0122\12\16\13\0\1\60"+
    "\2\0\1\16\1\12\5\16\1\61\3\0\1\16\1\62"+
    "\2\0\11\16\1\73\20\16\13\0\1\60\2\0\1\16"+
    "\1\12\5\16\1\61\3\0\1\16\1\62\2\0\4\16"+
    "\1\u0123\25\16\13\0\1\60\2\0\1\16\1\12\5\16"+
    "\1\61\3\0\1\16\1\62\2\0\11\16\1\372\20\16"+
    "\13\0\1\60\2\0\1\16\1\12\5\16\1\61\3\0"+
    "\1\16\1\62\2\0\24\16\1\230\5\16\13\0\1\60"+
    "\2\0\1\16\1\12\5\16\1\61\3\0\1\16\1\62"+
    "\2\0\14\16\1\u0124\15\16\13\0\1\60\2\0\1\16"+
    "\1\12\5\16\1\61\3\0\1\16\1\62\2\0\16\16"+
    "\1\u0125\13\16\13\0\1\60\2\0\1\16\1\12\5\16"+
    "\1\61\3\0\1\16\1\62\2\0\16\16\1\u0126\13\16"+
    "\13\0\1\60\2\0\1\16\1\12\5\16\1\61\3\0"+
    "\1\16\1\62\2\0\22\16\1\105\7\16\13\0\1\60"+
    "\2\0\1\16\1\12\5\16\1\61\3\0\1\16\1\62"+
    "\2\0\16\16\1\270\13\16\13\0\1\60\2\0\1\16"+
    "\1\12\5\16\1\61\3\0\1\16\1\62\2\0\11\16"+
    "\1\u0127\20\16\13\0\1\60\2\0\1\16\1\12\5\16"+
    "\1\61\3\0\1\16\1\62\2\0\14\16\1\245\15\16"+
    "\13\0\1\60\2\0\1\16\1\12\5\16\1\61\3\0"+
    "\1\16\1\62\2\0\22\16\1\224\7\16\13\0\1\60"+
    "\2\0\1\16\1\12\5\16\1\61\3\0\1\16\1\62"+
    "\2\0\13\16\1\323\16\16\13\0\1\60\2\0\1\16"+
    "\1\12\5\16\1\61\3\0\1\16\1\62\2\0\13\16"+
    "\1\105\16\16\13\0\1\60\2\0\1\16\1\12\5\16"+
    "\1\61\3\0\1\16\1\62\2\0\2\16\1\232\27\16"+
    "\13\0\1\60\2\0\1\16\1\12\5\16\1\61\3\0"+
    "\1\16\1\62\2\0\24\16\1\u0128\5\16\13\0\1\60"+
    "\2\0\1\16\1\12\5\16\1\61\3\0\1\16\1\62"+
    "\2\0\7\16\1\264\22\16\13\0\1\60\2\0\1\16"+
    "\1\12\5\16\1\61\3\0\1\16\1\62\2\0\1\u0129"+
    "\31\16\13\0\1\60\2\0\1\16\1\12\5\16\1\61"+
    "\3\0\1\16\1\62\2\0\20\16\1\u012a\11\16\13\0"+
    "\1\60\2\0\1\16\1\12\5\16\1\61\3\0\1\16"+
    "\1\62\2\0\7\16\1\203\22\16\13\0\1\60\2\0"+
    "\1\16\1\12\5\16\1\61\3\0\1\16\1\62\2\0"+
    "\25\16\1\u012b\4\16\13\0\1\60\2\0\1\16\1\12"+
    "\5\16\1\61\3\0\1\16\1\62\2\0\22\16\1\u012c"+
    "\7\16\13\0\1\60\2\0\1\16\1\12\5\16\1\61"+
    "\3\0\1\16\1\62\2\0\11\16\1\u012d\20\16\13\0"+
    "\1\60\2\0\1\16\1\12\5\16\1\61\3\0\1\16"+
    "\1\62\2\0\2\16\1\335\27\16\13\0\1\60\2\0"+
    "\1\16\1\12\5\16\1\61\3\0\1\16\1\62\2\0"+
    "\3\16\1\302\26\16\13\0\1\60\2\0\1\16\1\12"+
    "\5\16\1\61\3\0\1\16\1\62\2\0\14\16\1\u012e"+
    "\15\16\13\0\1\60\2\0\1\16\1\12\5\16\1\61"+
    "\3\0\1\16\1\62\2\0\1\16\1\u012f\30\16\13\0"+
    "\1\60\2\0\1\16\1\12\5\16\1\61\3\0\1\16"+
    "\1\62\2\0\24\16\1\246\5\16\13\0\1\60\2\0"+
    "\1\16\1\12\5\16\1\61\3\0\1\16\1\62\2\0"+
    "\31\16\1\u0130\13\0\1\60\2\0\1\16\1\12\5\16"+
    "\1\61\3\0\1\16\1\62\2\0\22\16\1\u0131\7\16"+
    "\13\0\1\60\2\0\1\16\1\12\5\16\1\61\3\0"+
    "\1\16\1\62\2\0\2\16\1\u0132\27\16\13\0\1\60"+
    "\2\0\1\16\1\12\5\16\1\61\3\0\1\16\1\62"+
    "\2\0\5\16\1\u0133\24\16\13\0\1\60\2\0\1\16"+
    "\1\12\5\16\1\61\3\0\1\16\1\62\2\0\5\16"+
    "\1\u0134\24\16\13\0\1\60\2\0\1\16\1\12\5\16"+
    "\1\61\3\0\1\16\1\62\2\0\24\16\1\u0135\5\16"+
    "\13\0\1\60\2\0\1\16\1\12\5\16\1\61\3\0"+
    "\1\16\1\62\2\0\15\16\1\u0136\4\16\1\u0137\7\16"+
    "\13\0\1\60\2\0\1\16\1\12\5\16\1\61\3\0"+
    "\1\16\1\62\2\0\16\16\1\323\13\16\13\0\1\60"+
    "\2\0\1\16\1\12\5\16\1\61\3\0\1\16\1\62"+
    "\2\0\17\16\1\u0138\12\16\13\0\1\60\2\0\1\16"+
    "\1\12\5\16\1\61\3\0\1\16\1\62\2\0\16\16"+
    "\1\u0139\13\16\13\0\1\60\2\0\1\16\1\12\5\16"+
    "\1\61\3\0\1\16\1\62\2\0\14\16\1\u0123\15\16"+
    "\13\0\1\60\2\0\1\16\1\12\5\16\1\61\3\0"+
    "\1\16\1\62\2\0\24\16\1\u013a\5\16\13\0\1\60"+
    "\2\0\1\16\1\12\5\16\1\61\3\0\1\16\1\62"+
    "\2\0\24\16\1\264\5\16\13\0\1\60\2\0\1\16"+
    "\1\12\5\16\1\61\3\0\1\16\1\62\2\0\5\16"+
    "\1\270\24\16\13\0\1\60\2\0\1\16\1\12\5\16"+
    "\1\61\3\0\1\16\1\62\2\0\10\16\1\u013b\21\16"+
    "\13\0\1\60\2\0\1\16\1\12\5\16\1\61\3\0"+
    "\1\16\1\62\2\0\6\16\1\u013c\23\16\13\0\1\60"+
    "\2\0\1\16\1\12\5\16\1\61\3\0\1\16\1\62"+
    "\2\0\11\16\1\u013d\20\16\13\0\1\60\2\0\1\16"+
    "\1\12\5\16\1\61\3\0\1\16\1\62\2\0\1\16"+
    "\1\73\30\16\13\0\1\60\2\0\1\16\1\12\5\16"+
    "\1\61\3\0\1\16\1\62\2\0\10\16\1\u013e\21\16"+
    "\13\0\1\60\2\0\1\16\1\12\5\16\1\61\3\0"+
    "\1\16\1\62\2\0\1\16\1\353\30\16\13\0\1\60"+
    "\2\0\1\16\1\12\5\16\1\61\3\0\1\16\1\62"+
    "\2\0\11\16\1\151\20\16\13\0\1\60\2\0\1\16"+
    "\1\12\5\16\1\61\3\0\1\16\1\62\2\0\5\16"+
    "\1\u013f\24\16\13\0\1\60\2\0\1\16\1\12\5\16"+
    "\1\61\3\0\1\16\1\62\2\0\5\16\1\u0140\24\16"+
    "\13\0\1\60\2\0\1\16\1\12\5\16\1\61\3\0"+
    "\1\16\1\62\2\0\24\16\1\u0123\5\16\13\0\1\60"+
    "\2\0\1\16\1\12\5\16\1\61\3\0\1\16\1\62"+
    "\2\0\22\16\1\u0141\7\16\13\0\1\60\2\0\1\16"+
    "\1\12\5\16\1\61\3\0\1\16\1\62\2\0\26\16"+
    "\1\224\3\16\13\0\1\60\2\0\1\16\1\12\5\16"+
    "\1\61\3\0\1\16\1\62\2\0\1\16\1\u0142\30\16"+
    "\13\0\1\60\2\0\1\16\1\12\5\16\1\61\3\0"+
    "\1\16\1\62\2\0\13\16\1\224\16\16\13\0\1\60"+
    "\2\0\1\16\1\12\5\16\1\61\3\0\1\16\1\62"+
    "\2\0\14\16\1\u0143\15\16\13\0\1\60\2\0\1\16"+
    "\1\12\5\16\1\61\3\0\1\16\1\62\2\0\16\16"+
    "\1\105\13\16\13\0\1\60\2\0\1\16\1\12\5\16"+
    "\1\61\3\0\1\16\1\62\2\0\24\16\1\u0144\5\16"+
    "\13\0\1\60\2\0\1\16\1\12\5\16\1\61\3\0"+
    "\1\16\1\62\2\0\1\16\1\307\30\16\13\0\1\60"+
    "\2\0\1\16\1\12\5\16\1\61\3\0\1\16\1\62"+
    "\2\0\16\16\1\u0145\13\16\13\0\1\60\2\0\1\16"+
    "\1\12\5\16\1\61\3\0\1\16\1\62\2\0\3\16"+
    "\1\u0126\26\16\13\0\1\60\2\0\1\16\1\12\5\16"+
    "\1\61\3\0\1\16\1\62\2\0\11\16\1\u0146\20\16"+
    "\13\0\1\60\2\0\1\16\1\12\5\16\1\61\3\0"+
    "\1\16\1\62\2\0\25\16\1\u0147\4\16\13\0\1\60"+
    "\2\0\1\16\1\12\5\16\1\61\3\0\1\16\1\62"+
    "\2\0\23\16\1\105\6\16\13\0\1\60\2\0\1\16"+
    "\1\12\5\16\1\61\3\0\1\16\1\62\2\0\17\16"+
    "\1\u0148\12\16\13\0\1\60\2\0\1\16\1\12\5\16"+
    "\1\61\3\0\1\16\1\62\2\0\3\16\1\u0149\26\16"+
    "\13\0\1\60\2\0\1\16\1\12\5\16\1\61\3\0"+
    "\1\16\1\62\2\0\24\16\1\u014a\5\16\13\0\1\60"+
    "\2\0\1\16\1\12\5\16\1\61\3\0\1\16\1\62"+
    "\2\0\2\16\1\u014b\27\16\13\0\1\60\2\0\1\16"+
    "\1\12\5\16\1\61\3\0\1\16\1\62\2\0\11\16"+
    "\1\u0118\20\16\13\0\1\60\2\0\1\16\1\12\5\16"+
    "\1\61\3\0\1\16\1\62\2\0\1\16\1\u014c\1\u014d"+
    "\4\16\1\u014e\10\16\1\u014f\1\16\1\u0150\7\16\13\0"+
    "\1\60\2\0\1\16\1\12\5\16\1\61\3\0\1\16"+
    "\1\62\2\0\1\16\1\u0151\30\16\13\0\1\60\2\0"+
    "\1\16\1\12\5\16\1\61\3\0\1\16\1\62\2\0"+
    "\14\16\1\u0152\15\16\13\0\1\60\2\0\1\16\1\12"+
    "\5\16\1\61\3\0\1\16\1\62\2\0\17\16\1\246"+
    "\12\16\13\0\1\60\2\0\1\16\1\12\5\16\1\61"+
    "\3\0\1\16\1\62\2\0\3\16\1\u0153\26\16\13\0"+
    "\1\60\2\0\1\16\1\12\5\16\1\61\3\0\1\16"+
    "\1\62\2\0\5\16\1\u0154\24\16\13\0\1\60\2\0"+
    "\1\16\1\12\5\16\1\61\3\0\1\16\1\62\2\0"+
    "\16\16\1\302\13\16\13\0\1\60\2\0\1\16\1\12"+
    "\5\16\1\61\3\0\1\16\1\62\2\0\24\16\1\u0155"+
    "\5\16\13\0\1\60\2\0\1\16\1\12\5\16\1\61"+
    "\3\0\1\16\1\62\2\0\11\16\1\u0156\20\16\13\0"+
    "\1\60\2\0\1\16\1\12\5\16\1\61\3\0\1\16"+
    "\1\62\2\0\11\16\1\u0157\20\16\13\0\1\60\2\0"+
    "\1\16\1\12\5\16\1\61\3\0\1\16\1\62\2\0"+
    "\22\16\1\u010c\7\16\13\0\1\60\2\0\1\16\1\12"+
    "\5\16\1\61\3\0\1\16\1\62\2\0\14\16\1\u0158"+
    "\15\16\13\0\1\60\2\0\1\16\1\12\5\16\1\61"+
    "\3\0\1\16\1\62\2\0\11\16\1\u0159\20\16\13\0"+
    "\1\60\2\0\1\16\1\12\5\16\1\61\3\0\1\16"+
    "\1\62\2\0\17\16\1\u015a\12\16\13\0\1\60\2\0"+
    "\1\16\1\12\5\16\1\61\3\0\1\16\1\62\2\0"+
    "\25\16\1\u015b\4\16\13\0\1\60\2\0\1\16\1\12"+
    "\5\16\1\61\3\0\1\16\1\62\2\0\27\16\1\105"+
    "\2\16\13\0\1\60\2\0\1\16\1\12\5\16\1\61"+
    "\3\0\1\16\1\62\2\0\11\16\1\u015c\20\16\13\0"+
    "\1\60\2\0\1\16\1\12\5\16\1\61\3\0\1\16"+
    "\1\62\2\0\1\u015d\31\16\13\0\1\60\2\0\1\16"+
    "\1\12\5\16\1\61\3\0\1\16\1\62\2\0\5\16"+
    "\1\u015e\24\16\13\0\1\60\2\0\1\16\1\12\5\16"+
    "\1\61\3\0\1\16\1\62\2\0\11\16\1\217\17\16"+
    "\1\105\13\0\1\60\2\0\1\16\1\12\5\16\1\61"+
    "\3\0\1\16\1\62\2\0\20\16\1\u015f\11\16\13\0"+
    "\1\60\2\0\1\16\1\12\5\16\1\61\3\0\1\16"+
    "\1\62\2\0\5\16\1\u0160\24\16\13\0\1\60\2\0"+
    "\1\16\1\12\5\16\1\61\3\0\1\16\1\62\2\0"+
    "\6\16\1\u0161\23\16\13\0\1\60\2\0\1\16\1\12"+
    "\5\16\1\61\3\0\1\16\1\62\2\0\22\16\1\u0123"+
    "\7\16\13\0\1\60\2\0\1\16\1\12\5\16\1\61"+
    "\3\0\1\16\1\62\2\0\5\16\1\u0162\24\16\13\0"+
    "\1\60\2\0\1\16\1\12\5\16\1\61\3\0\1\16"+
    "\1\62\2\0\3\16\1\224\26\16\13\0\1\60\2\0"+
    "\1\16\1\12\5\16\1\61\3\0\1\16\1\62\2\0"+
    "\17\16\1\u0151\12\16\13\0\1\60\2\0\1\16\1\12"+
    "\5\16\1\61\3\0\1\16\1\62\2\0\1\16\1\u0163"+
    "\30\16\13\0\1\60\2\0\1\16\1\12\5\16\1\61"+
    "\3\0\1\16\1\62\2\0\7\16\1\105\22\16\13\0"+
    "\1\60\2\0\1\16\1\12\5\16\1\61\3\0\1\16"+
    "\1\62\2\0\26\16\1\u0110\3\16\13\0\1\60\2\0"+
    "\1\16\1\12\5\16\1\61\3\0\1\16\1\62\2\0"+
    "\7\16\1\257\22\16\13\0\1\60\2\0\1\16\1\12"+
    "\5\16\1\61\3\0\1\16\1\62\2\0\27\16\1\323"+
    "\2\16\13\0\1\60\2\0\1\16\1\12\5\16\1\61"+
    "\3\0\1\16\1\62\2\0\5\16\1\u0164\24\16\13\0"+
    "\1\60\2\0\1\16\1\12\5\16\1\61\3\0\1\16"+
    "\1\62\2\0\25\16\1\356\4\16\13\0\1\60\2\0"+
    "\1\16\1\12\5\16\1\61\3\0\1\16\1\62\2\0"+
    "\25\16\1\u010b\4\16\13\0\1\60\2\0\1\16\1\12"+
    "\5\16\1\61\3\0\1\16\1\62\2\0\21\16\1\75"+
    "\10\16\13\0\1\60\2\0\1\16\1\12\5\16\1\61"+
    "\3\0\1\16\1\62\2\0\14\16\1\u0165\15\16\13\0"+
    "\1\60\2\0\1\16\1\12\5\16\1\61\3\0\1\16"+
    "\1\62\2\0\22\16\1\u0166\7\16\13\0\1\60\2\0"+
    "\1\16\1\12\5\16\1\61\3\0\1\16\1\62\2\0"+
    "\25\16\1\u0167\4\16\13\0\1\60\2\0\1\16\1\12"+
    "\5\16\1\61\3\0\1\16\1\62\2\0\5\16\1\265"+
    "\24\16\13\0\1\60\2\0\1\16\1\12\5\16\1\61"+
    "\3\0\1\16\1\62\2\0\3\16\1\276\26\16\13\0"+
    "\1\60\2\0\1\16\1\12\5\16\1\61\3\0\1\16"+
    "\1\62\2\0\24\16\1\u0168\5\16\13\0\1\60\2\0"+
    "\1\16\1\12\5\16\1\61\3\0\1\16\1\62\2\0"+
    "\25\16\1\u0169\4\16\13\0\1\60\2\0\1\16\1\12"+
    "\5\16\1\61\3\0\1\16\1\62\2\0\10\16\1\u016a"+
    "\21\16\13\0\1\60\2\0\1\16\1\12\5\16\1\61"+
    "\3\0\1\16\1\62\2\0\5\16\1\u016b\24\16\13\0"+
    "\1\60\2\0\1\16\1\12\5\16\1\61\3\0\1\16"+
    "\1\62\2\0\17\16\1\u016c\12\16\13\0\1\60\2\0"+
    "\1\16\1\12\5\16\1\61\3\0\1\16\1\62\2\0"+
    "\17\16\1\u016d\12\16\13\0\1\60\2\0\1\16\1\12"+
    "\5\16\1\61\3\0\1\16\1\62\2\0\17\16\1\u016e"+
    "\12\16\13\0\1\60\2\0\1\16\1\12\5\16\1\61"+
    "\3\0\1\16\1\62\2\0\4\16\1\264\25\16\13\0"+
    "\1\60\2\0\1\16\1\12\5\16\1\61\3\0\1\16"+
    "\1\62\2\0\14\16\1\264\15\16\13\0\1\60\2\0"+
    "\1\16\1\12\5\16\1\61\3\0\1\16\1\62\2\0"+
    "\24\16\1\224\5\16\13\0\1\60\2\0\1\16\1\12"+
    "\5\16\1\61\3\0\1\16\1\62\2\0\20\16\1\u014f"+
    "\11\16\13\0\1\60\2\0\1\16\1\12\5\16\1\61"+
    "\3\0\1\16\1\62\2\0\23\16\1\u016f\6\16\13\0"+
    "\1\60\2\0\1\16\1\12\5\16\1\61\3\0\1\16"+
    "\1\62\2\0\14\16\1\u0170\15\16\13\0\1\60\2\0"+
    "\1\16\1\12\5\16\1\61\3\0\1\16\1\62\2\0"+
    "\4\16\1\u0171\25\16\13\0\1\60\2\0\1\16\1\12"+
    "\5\16\1\61\3\0\1\16\1\62\2\0\25\16\1\73"+
    "\4\16\13\0\1\60\2\0\1\16\1\12\5\16\1\61"+
    "\3\0\1\16\1\62\2\0\23\16\1\u0123\6\16\13\0"+
    "\1\60\2\0\1\16\1\12\5\16\1\61\3\0\1\16"+
    "\1\62\2\0\24\16\1\234\5\16\13\0\1\60\2\0"+
    "\1\16\1\12\5\16\1\61\3\0\1\16\1\62\2\0"+
    "\15\16\1\u0172\14\16\13\0\1\60\2\0\1\16\1\12"+
    "\5\16\1\61\3\0\1\16\1\62\2\0\25\16\1\230"+
    "\4\16\13\0\1\60\2\0\1\16\1\12\5\16\1\61"+
    "\3\0\1\16\1\62\2\0\1\16\1\u0173\3\16\1\267"+
    "\24\16\13\0\1\60\2\0\1\16\1\12\5\16\1\61"+
    "\3\0\1\16\1\62\2\0\22\16\1\u0174\7\16\13\0"+
    "\1\60\2\0\1\16\1\12\5\16\1\61\3\0\1\16"+
    "\1\62\2\0\7\16\1\u0175\22\16\13\0\1\60\2\0"+
    "\1\16\1\12\5\16\1\61\3\0\1\16\1\62\2\0"+
    "\14\16\1\u0176\15\16\13\0\1\60\2\0\1\16\1\12"+
    "\5\16\1\61\3\0\1\16\1\62\2\0\11\16\1\u011f"+
    "\20\16\13\0\1\60\2\0\1\16\1\12\5\16\1\61"+
    "\3\0\1\16\1\62\2\0\16\16\1\u0177\13\16\13\0"+
    "\1\60\2\0\1\16\1\12\5\16\1\61\3\0\1\16"+
    "\1\62\2\0\15\16\1\264\14\16\13\0\1\60\2\0"+
    "\1\16\1\12\5\16\1\61\3\0\1\16\1\62\2\0"+
    "\1\16\1\u0178\30\16\13\0\1\60\2\0\1\16\1\12"+
    "\5\16\1\61\3\0\1\16\1\62\2\0\16\16\1\203"+
    "\13\16\13\0\1\60\2\0\1\16\1\12\5\16\1\61"+
    "\3\0\1\16\1\62\2\0\31\16\1\u0179\13\0\1\60"+
    "\2\0\1\16\1\12\5\16\1\61\3\0\1\16\1\62"+
    "\2\0\1\u017a\31\16\13\0\1\60\2\0\1\16\1\12"+
    "\5\16\1\61\3\0\1\16\1\62\2\0\5\16\1\u012f"+
    "\24\16\13\0\1\60\2\0\1\16\1\12\5\16\1\61"+
    "\3\0\1\16\1\62\2\0\31\16\1\323\13\0\1\60"+
    "\2\0\1\16\1\12\5\16\1\61\3\0\1\16\1\62"+
    "\2\0\20\16\1\u017b\11\16\13\0\1\60\2\0\1\16"+
    "\1\12\5\16\1\61\3\0\1\16\1\62\2\0\1\16"+
    "\1\u017c\30\16\13\0\1\60\2\0\1\16\1\12\5\16"+
    "\1\61\3\0\1\16\1\62\2\0\24\16\1\u017d\5\16"+
    "\13\0\1\60\2\0\1\16\1\12\5\16\1\61\3\0"+
    "\1\16\1\62\2\0\3\16\1\264\26\16\13\0\1\60"+
    "\2\0\1\16\1\12\5\16\1\61\3\0\1\16\1\62"+
    "\2\0\4\16\1\203\25\16\13\0\1\60\2\0\1\16"+
    "\1\12\5\16\1\61\3\0\1\16\1\62\2\0\1\u017e"+
    "\31\16\13\0\1\60\2\0\1\16\1\12\1\16\1\u017f"+
    "\1\u0180\1\16\1\105\1\61\3\0\1\16\1\62\2\0"+
    "\32\16\13\0\1\60\2\0\1\16\1\12\5\16\1\61"+
    "\3\0\1\16\1\62\2\0\14\16\1\230\15\16\13\0"+
    "\1\60\2\0\1\16\1\12\5\16\1\61\3\0\1\16"+
    "\1\62\2\0\15\16\1\u0181\14\16\13\0\1\60\2\0"+
    "\1\16\1\12\5\16\1\61\3\0\1\16\1\62\2\0"+
    "\31\16\1\203\13\0\1\60\2\0\1\16\1\12\5\16"+
    "\1\61\3\0\1\16\1\62\2\0\2\16\1\u0182\27\16"+
    "\13\0\1\60\2\0\1\16\1\12\1\105\1\16\1\105"+
    "\2\16\1\61\3\0\1\16\1\62\2\0\32\16\13\0"+
    "\1\60\2\0\1\16\1\12\1\105\4\16\1\61\3\0"+
    "\1\16\1\62\2\0\32\16\13\0\1\60\2\0\1\16"+
    "\1\12\5\16\1\61\3\0\1\16\1\62\2\0\5\16"+
    "\1\u0183\24\16\13\0\1\60\2\0\1\16\1\12\5\16"+
    "\1\61\3\0\1\16\1\62\2\0\1\16\1\255\30\16"+
    "\13\0\1\60\2\0\1\16\1\12\5\16\1\61\3\0"+
    "\1\16\1\62\2\0\15\16\1\u0136\14\16\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[20240];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\52\1\1\0\1\1\1\11\3\0\2\1"+
    "\1\0\1\1\1\0\115\1\1\0\1\1\2\0\2\1"+
    "\1\0\1\1\1\0\131\1\1\11\234\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[387];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  McFunctionLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 15: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 16: break;
          case 3:
            { yybegin(YYINITIAL); return McFunctionTypes.COMMENT;
            }
          // fall through
          case 17: break;
          case 4:
            { return McFunctionTypes.IDENTIFIER;
            }
          // fall through
          case 18: break;
          case 5:
            { return McFunctionTypes.NUMBER;
            }
          // fall through
          case 19: break;
          case 6:
            { return McFunctionTypes.OPERATOR;
            }
          // fall through
          case 20: break;
          case 7:
            { return McFunctionTypes.COORDINATE;
            }
          // fall through
          case 21: break;
          case 8:
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 22: break;
          case 9:
            { return McFunctionTypes.STRING;
            }
          // fall through
          case 23: break;
          case 10:
            { return McFunctionTypes.SELECTOR;
            }
          // fall through
          case 24: break;
          case 11:
            { return McFunctionTypes.JSON;
            }
          // fall through
          case 25: break;
          case 12:
            { return McFunctionTypes.COMMAND_ARGUMENT;
            }
          // fall through
          case 26: break;
          case 13:
            { return McFunctionTypes.COMMAND;
            }
          // fall through
          case 27: break;
          case 14:
            { return McFunctionTypes.COLOR;
            }
          // fall through
          case 28: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
